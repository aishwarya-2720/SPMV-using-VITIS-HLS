-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmv_kernel is
generic (
    C_M_AXI_GMEM_0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ID_WIDTH-1 downto 0);
    m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_DATA_WIDTH-1 downto 0);
    m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ID_WIDTH-1 downto 0);
    m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ID_WIDTH-1 downto 0);
    m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_DATA_WIDTH-1 downto 0);
    m_axi_gmem_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ID_WIDTH-1 downto 0);
    m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ID_WIDTH-1 downto 0);
    m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_1_AWREADY : IN STD_LOGIC;
    m_axi_gmem_1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ID_WIDTH-1 downto 0);
    m_axi_gmem_1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_1_WVALID : OUT STD_LOGIC;
    m_axi_gmem_1_WREADY : IN STD_LOGIC;
    m_axi_gmem_1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_DATA_WIDTH-1 downto 0);
    m_axi_gmem_1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_1_WLAST : OUT STD_LOGIC;
    m_axi_gmem_1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ID_WIDTH-1 downto 0);
    m_axi_gmem_1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_1_ARREADY : IN STD_LOGIC;
    m_axi_gmem_1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ID_WIDTH-1 downto 0);
    m_axi_gmem_1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_1_RVALID : IN STD_LOGIC;
    m_axi_gmem_1_RREADY : OUT STD_LOGIC;
    m_axi_gmem_1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_DATA_WIDTH-1 downto 0);
    m_axi_gmem_1_RLAST : IN STD_LOGIC;
    m_axi_gmem_1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ID_WIDTH-1 downto 0);
    m_axi_gmem_1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_1_BVALID : IN STD_LOGIC;
    m_axi_gmem_1_BREADY : OUT STD_LOGIC;
    m_axi_gmem_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ID_WIDTH-1 downto 0);
    m_axi_gmem_1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_BUSER_WIDTH-1 downto 0);
    values : IN STD_LOGIC_VECTOR (63 downto 0);
    col_indices : IN STD_LOGIC_VECTOR (63 downto 0);
    row_indices : IN STD_LOGIC_VECTOR (63 downto 0);
    x : IN STD_LOGIC_VECTOR (63 downto 0);
    y : IN STD_LOGIC_VECTOR (63 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    m : IN STD_LOGIC_VECTOR (31 downto 0);
    nnz : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of spmv_kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "spmv_kernel_spmv_kernel,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=875554,HLS_SYN_TPT=none,HLS_SYN_MEM=260,HLS_SYN_DSP=0,HLS_SYN_FF=3351,HLS_SYN_LUT=4981,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage4 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage5 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage6 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (65 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (65 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (65 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (65 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (65 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (65 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (65 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (65 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (65 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (65 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (65 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (65 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln26_reg_1241 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln26_1_reg_1288 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln35_1_reg_1328 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal icmp_ln53_1_reg_1483 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_0_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage3 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage3 : BOOLEAN;
    signal icmp_ln53_1_reg_1483_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_1521 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_0_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage4 : signal is "none";
    signal ap_block_pp2_stage4 : BOOLEAN;
    signal gmem_0_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal icmp_ln53_1_reg_1483_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_1521_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal icmp_ln72_reg_1587 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_1_blk_n_AR : STD_LOGIC;
    signal gmem_1_blk_n_R : STD_LOGIC;
    signal gmem_0_AWVALID : STD_LOGIC;
    signal gmem_0_AWREADY : STD_LOGIC;
    signal gmem_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_0_WVALID : STD_LOGIC;
    signal gmem_0_WREADY : STD_LOGIC;
    signal gmem_0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_0_ARVALID : STD_LOGIC;
    signal gmem_0_ARREADY : STD_LOGIC;
    signal gmem_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_0_RVALID : STD_LOGIC;
    signal gmem_0_RREADY : STD_LOGIC;
    signal gmem_0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_0_RLAST : STD_LOGIC;
    signal gmem_0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_0_BVALID : STD_LOGIC;
    signal gmem_0_BREADY : STD_LOGIC;
    signal gmem_0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_1_AWREADY : STD_LOGIC;
    signal gmem_1_WREADY : STD_LOGIC;
    signal gmem_1_ARVALID : STD_LOGIC;
    signal gmem_1_ARREADY : STD_LOGIC;
    signal gmem_1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_1_RVALID : STD_LOGIC;
    signal gmem_1_RREADY : STD_LOGIC;
    signal gmem_1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_1_RLAST : STD_LOGIC;
    signal gmem_1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_1_BVALID : STD_LOGIC;
    signal gmem_1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_385 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_385_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal previous_row_index_1_reg_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_418 : STD_LOGIC_VECTOR (30 downto 0);
    signal remained_row_index_prev_1_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_all_row_prev_2_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_local_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_block_state62_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_state69_pp2_stage3_iter1 : BOOLEAN;
    signal ap_predicate_op349_writereq_state69 : BOOLEAN;
    signal ap_block_state69_io : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal grp_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal icmp_ln26_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal icmp_ln26_1_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_1_reg_1288_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_fu_564_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln26_reg_1292 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal gmem_0_addr_read_reg_1297 : STD_LOGIC_VECTOR (31 downto 0);
    signal previous_row_index_reg_1308 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_1313 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln35_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_0_addr_2_reg_1322 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln35_1_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state27_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln35_1_reg_1328_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_reg_1328_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_reg_1328_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_reg_1328_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_reg_1328_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_reg_1328_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_reg_1328_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_reg_1328_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_fu_650_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_17_reg_1332 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_17_reg_1332_pp1_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_17_reg_1332_pp1_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_17_reg_1332_pp1_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_17_reg_1332_pp1_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_17_reg_1332_pp1_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_17_reg_1332_pp1_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_17_reg_1332_pp1_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_17_reg_1332_pp1_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal row_index_reg_1342 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_index_reg_1342_pp1_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln39_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln39_reg_1348 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_1353 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state37_io : BOOLEAN;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal row_indices_diff_local_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_indices_diff_local_load_reg_1375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal gmem_0_addr_3_read_reg_1380 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state44 : BOOLEAN;
    signal gmem_1_addr_read_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal bitcast_ln47_fu_719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal p_Result_s_reg_1400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal p_Repl2_s_fu_745_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Repl2_s_reg_1405 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_759_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1410 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_777_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_1415 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_all_row_prev_1_reg_1420 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal val_V_fu_839_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_V_reg_1426 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_851_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_reg_1432 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal trunc_ln53_fu_872_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln53_reg_1455 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln53_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln53_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln53_reg_1461 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_1_addr_1_reg_1466 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_0_addr_4_reg_1472 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_940_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state52_io : BOOLEAN;
    signal icmp_ln53_1_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state59_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state66_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state73_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal gmem_0_addr_4_read_reg_1487 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state60_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state67_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state74_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal gmem_1_addr_1_read_reg_1492 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state61_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state68_pp2_stage2_iter1 : BOOLEAN;
    signal ap_predicate_op367_writeresp_state75 : BOOLEAN;
    signal ap_block_state75_pp2_stage2_iter2 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal y_previous_break_1_reg_1502 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state63_pp2_stage4_iter0 : BOOLEAN;
    signal ap_block_state70_pp2_stage4_iter1 : BOOLEAN;
    signal ap_predicate_op355_write_state70 : BOOLEAN;
    signal ap_block_state70_io : BOOLEAN;
    signal ap_block_pp2_stage4_11001 : BOOLEAN;
    signal j_1_reg_1508 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln57_fu_959_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln59_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage5 : signal is "none";
    signal ap_block_state64_pp2_stage5_iter0 : BOOLEAN;
    signal ap_block_state71_pp2_stage5_iter1 : BOOLEAN;
    signal ap_block_pp2_stage5_11001 : BOOLEAN;
    signal add_ln53_3_fu_984_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln53_3_reg_1525 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp2_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage6 : signal is "none";
    signal ap_block_state65_pp2_stage6_iter0 : BOOLEAN;
    signal ap_block_state72_pp2_stage6_iter1 : BOOLEAN;
    signal ap_block_pp2_stage6_11001 : BOOLEAN;
    signal mul_reg_1530 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_0_addr_5_reg_1535 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_5_reg_1546 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_3_fu_1058_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Repl2_3_reg_1551 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_1_fu_1072_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_1556 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_1_fu_1090_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_reg_1561 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_V_1_fu_1152_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_V_1_reg_1566 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_1164_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal remained_row_index_fu_1175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal remained_row_index_reg_1577 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_all_row_reg_1582 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln72_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal gmem_0_addr_6_reg_1591 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state27 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_block_pp2_stage4_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state63 : STD_LOGIC;
    signal ap_block_pp2_stage6_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal x_local_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_local_ce0 : STD_LOGIC;
    signal x_local_we0 : STD_LOGIC;
    signal x_local_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_indices_diff_local_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_indices_diff_local_ce0 : STD_LOGIC;
    signal row_indices_diff_local_we0 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_389_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_previous_row_index_1_phi_fu_411_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_2_phi_fu_422_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_remained_row_index_prev_1_phi_fu_433_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage5 : BOOLEAN;
    signal ap_phi_mux_y_all_row_prev_2_phi_fu_443_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage6 : BOOLEAN;
    signal ap_phi_reg_pp2_iter0_remained_row_index_1_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp2_iter1_remained_row_index_1_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_previous_break_0_lcssa_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal j_0_lcssa_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_all_row_prev_0_lcssa_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal remained_row_index_prev_0_lcssa_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast1_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_fu_1032_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln33_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln47_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln47_1_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln53_fu_910_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln57_fu_920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln61_fu_1022_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln74_fu_1220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln61_fu_1170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage4_01001 : BOOLEAN;
    signal ap_block_state87 : BOOLEAN;
    signal bitcast_ln74_fu_1230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_previous_break_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_969_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_504_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_512_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_534_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal i_cast_fu_555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_fu_579_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_fu_604_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln35_fu_620_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_625_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln39_fu_665_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln3_fu_675_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln47_1_fu_695_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_s_fu_723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_4_fu_735_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln340_fu_749_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln340_fu_753_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_767_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1311_fu_773_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_V_fu_785_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_prom_i_i_i_cast_cast_cast_fu_798_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_794_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal sh_prom_i_i_i_cast_cast_cast_cast_fu_801_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_805_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_5_fu_817_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_811_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_825_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_829_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_846_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_857_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln53_1_fu_880_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln53_2_fu_895_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln53_1_fu_900_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln4_fu_885_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln61_fu_990_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_995_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln61_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln61_1_fu_1007_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln5_fu_1012_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_3_fu_1036_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_5_fu_1048_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln340_1_fu_1062_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln340_1_fu_1066_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_1_fu_1080_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1311_1_fu_1086_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_V_1_fu_1098_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_prom_i_i_i14_cast_cast_cast_fu_1111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_1107_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal sh_prom_i_i_i14_cast_cast_cast_cast_fu_1114_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_2_fu_1118_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_9_fu_1130_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_1124_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_1_fu_1138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1142_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_3_fu_1159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_fu_1187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_1193_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln74_fu_1201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln74_1_fu_1205_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln6_fu_1210_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_504_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp2_stage1_00001 : BOOLEAN;
    signal ap_block_pp2_stage6_00001 : BOOLEAN;
    signal grp_fu_504_ce : STD_LOGIC;
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_fu_512_ce : STD_LOGIC;
    signal grp_fu_516_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal ap_block_pp2_stage5_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component spmv_kernel_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmv_kernel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmv_kernel_sitofp_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmv_kernel_x_local IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmv_kernel_gmem_0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component spmv_kernel_gmem_1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    gmem_0_m_axi_U : component spmv_kernel_gmem_0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_0_AWVALID,
        AWREADY => m_axi_gmem_0_AWREADY,
        AWADDR => m_axi_gmem_0_AWADDR,
        AWID => m_axi_gmem_0_AWID,
        AWLEN => m_axi_gmem_0_AWLEN,
        AWSIZE => m_axi_gmem_0_AWSIZE,
        AWBURST => m_axi_gmem_0_AWBURST,
        AWLOCK => m_axi_gmem_0_AWLOCK,
        AWCACHE => m_axi_gmem_0_AWCACHE,
        AWPROT => m_axi_gmem_0_AWPROT,
        AWQOS => m_axi_gmem_0_AWQOS,
        AWREGION => m_axi_gmem_0_AWREGION,
        AWUSER => m_axi_gmem_0_AWUSER,
        WVALID => m_axi_gmem_0_WVALID,
        WREADY => m_axi_gmem_0_WREADY,
        WDATA => m_axi_gmem_0_WDATA,
        WSTRB => m_axi_gmem_0_WSTRB,
        WLAST => m_axi_gmem_0_WLAST,
        WID => m_axi_gmem_0_WID,
        WUSER => m_axi_gmem_0_WUSER,
        ARVALID => m_axi_gmem_0_ARVALID,
        ARREADY => m_axi_gmem_0_ARREADY,
        ARADDR => m_axi_gmem_0_ARADDR,
        ARID => m_axi_gmem_0_ARID,
        ARLEN => m_axi_gmem_0_ARLEN,
        ARSIZE => m_axi_gmem_0_ARSIZE,
        ARBURST => m_axi_gmem_0_ARBURST,
        ARLOCK => m_axi_gmem_0_ARLOCK,
        ARCACHE => m_axi_gmem_0_ARCACHE,
        ARPROT => m_axi_gmem_0_ARPROT,
        ARQOS => m_axi_gmem_0_ARQOS,
        ARREGION => m_axi_gmem_0_ARREGION,
        ARUSER => m_axi_gmem_0_ARUSER,
        RVALID => m_axi_gmem_0_RVALID,
        RREADY => m_axi_gmem_0_RREADY,
        RDATA => m_axi_gmem_0_RDATA,
        RLAST => m_axi_gmem_0_RLAST,
        RID => m_axi_gmem_0_RID,
        RUSER => m_axi_gmem_0_RUSER,
        RRESP => m_axi_gmem_0_RRESP,
        BVALID => m_axi_gmem_0_BVALID,
        BREADY => m_axi_gmem_0_BREADY,
        BRESP => m_axi_gmem_0_BRESP,
        BID => m_axi_gmem_0_BID,
        BUSER => m_axi_gmem_0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_0_ARVALID,
        I_ARREADY => gmem_0_ARREADY,
        I_ARADDR => gmem_0_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_0_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_0_RVALID,
        I_RREADY => gmem_0_RREADY,
        I_RDATA => gmem_0_RDATA,
        I_RID => gmem_0_RID,
        I_RUSER => gmem_0_RUSER,
        I_RRESP => gmem_0_RRESP,
        I_RLAST => gmem_0_RLAST,
        I_AWVALID => gmem_0_AWVALID,
        I_AWREADY => gmem_0_AWREADY,
        I_AWADDR => gmem_0_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_0_WVALID,
        I_WREADY => gmem_0_WREADY,
        I_WDATA => gmem_0_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_0_BVALID,
        I_BREADY => gmem_0_BREADY,
        I_BRESP => gmem_0_BRESP,
        I_BID => gmem_0_BID,
        I_BUSER => gmem_0_BUSER);

    gmem_1_m_axi_U : component spmv_kernel_gmem_1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_1_AWVALID,
        AWREADY => m_axi_gmem_1_AWREADY,
        AWADDR => m_axi_gmem_1_AWADDR,
        AWID => m_axi_gmem_1_AWID,
        AWLEN => m_axi_gmem_1_AWLEN,
        AWSIZE => m_axi_gmem_1_AWSIZE,
        AWBURST => m_axi_gmem_1_AWBURST,
        AWLOCK => m_axi_gmem_1_AWLOCK,
        AWCACHE => m_axi_gmem_1_AWCACHE,
        AWPROT => m_axi_gmem_1_AWPROT,
        AWQOS => m_axi_gmem_1_AWQOS,
        AWREGION => m_axi_gmem_1_AWREGION,
        AWUSER => m_axi_gmem_1_AWUSER,
        WVALID => m_axi_gmem_1_WVALID,
        WREADY => m_axi_gmem_1_WREADY,
        WDATA => m_axi_gmem_1_WDATA,
        WSTRB => m_axi_gmem_1_WSTRB,
        WLAST => m_axi_gmem_1_WLAST,
        WID => m_axi_gmem_1_WID,
        WUSER => m_axi_gmem_1_WUSER,
        ARVALID => m_axi_gmem_1_ARVALID,
        ARREADY => m_axi_gmem_1_ARREADY,
        ARADDR => m_axi_gmem_1_ARADDR,
        ARID => m_axi_gmem_1_ARID,
        ARLEN => m_axi_gmem_1_ARLEN,
        ARSIZE => m_axi_gmem_1_ARSIZE,
        ARBURST => m_axi_gmem_1_ARBURST,
        ARLOCK => m_axi_gmem_1_ARLOCK,
        ARCACHE => m_axi_gmem_1_ARCACHE,
        ARPROT => m_axi_gmem_1_ARPROT,
        ARQOS => m_axi_gmem_1_ARQOS,
        ARREGION => m_axi_gmem_1_ARREGION,
        ARUSER => m_axi_gmem_1_ARUSER,
        RVALID => m_axi_gmem_1_RVALID,
        RREADY => m_axi_gmem_1_RREADY,
        RDATA => m_axi_gmem_1_RDATA,
        RLAST => m_axi_gmem_1_RLAST,
        RID => m_axi_gmem_1_RID,
        RUSER => m_axi_gmem_1_RUSER,
        RRESP => m_axi_gmem_1_RRESP,
        BVALID => m_axi_gmem_1_BVALID,
        BREADY => m_axi_gmem_1_BREADY,
        BRESP => m_axi_gmem_1_BRESP,
        BID => m_axi_gmem_1_BID,
        BUSER => m_axi_gmem_1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_1_ARVALID,
        I_ARREADY => gmem_1_ARREADY,
        I_ARADDR => gmem_1_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_1_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_1_RVALID,
        I_RREADY => gmem_1_RREADY,
        I_RDATA => gmem_1_RDATA,
        I_RID => gmem_1_RID,
        I_RUSER => gmem_1_RUSER,
        I_RRESP => gmem_1_RRESP,
        I_RLAST => gmem_1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem_1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem_1_BRESP,
        I_BID => gmem_1_BID,
        I_BUSER => gmem_1_BUSER);

    x_local_U : component spmv_kernel_x_local
    generic map (
        DataWidth => 32,
        AddressRange => 60098,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => x_local_address0,
        ce0 => x_local_ce0,
        we0 => x_local_we0,
        d0 => x_local_d0,
        q0 => x_local_q0);

    row_indices_diff_local_U : component spmv_kernel_x_local
    generic map (
        DataWidth => 32,
        AddressRange => 60098,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => row_indices_diff_local_address0,
        ce0 => row_indices_diff_local_ce0,
        we0 => row_indices_diff_local_we0,
        d0 => conv_reg_1353,
        q0 => row_indices_diff_local_q0);

    faddfsub_32ns_32ns_32_5_full_dsp_1_U1 : component spmv_kernel_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_504_p0,
        din1 => grp_fu_504_p1,
        opcode => grp_fu_504_opcode,
        ce => grp_fu_504_ce,
        dout => grp_fu_504_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component spmv_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_512_p0,
        din1 => reg_519,
        ce => grp_fu_512_ce,
        dout => grp_fu_512_p2);

    sitofp_32ns_32_6_no_dsp_1_U3 : component spmv_kernel_sitofp_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sub_ln39_reg_1348,
        ce => grp_fu_516_ce,
        dout => grp_fu_516_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state27) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state27)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state27);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state63))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)) or ((ap_const_boolean_0 = ap_block_pp2_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6)))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp2_iter1_remained_row_index_1_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_reg_1521 = ap_const_lv1_1) and (icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                ap_phi_reg_pp2_iter1_remained_row_index_1_reg_450 <= p_Val2_7_fu_1164_p3;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6))) then 
                ap_phi_reg_pp2_iter1_remained_row_index_1_reg_450 <= ap_phi_reg_pp2_iter0_remained_row_index_1_reg_450;
            end if; 
        end if;
    end process;

    i_1_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i_1_reg_397 <= ap_const_lv32_1;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln35_1_fu_645_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_1_reg_397 <= add_ln35_1_fu_654_p2;
            end if; 
        end if;
    end process;

    i_2_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_2_reg_418 <= add_ln53_3_reg_1525;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                i_2_reg_418 <= ap_const_lv31_1;
            end if; 
        end if;
    end process;

    i_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_385 <= ap_const_lv16_0;
            elsif (((icmp_ln26_1_reg_1288 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_385 <= add_ln26_reg_1292;
            end if; 
        end if;
    end process;

    j_0_lcssa_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                j_0_lcssa_reg_472 <= j_1_reg_1508;
            elsif (((icmp_ln53_fu_866_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                j_0_lcssa_reg_472 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    j_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_reg_1521 = ap_const_lv1_1) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6))) then 
                j_fu_168 <= j_2_fu_969_p2;
            elsif (((icmp_ln53_fu_866_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                j_fu_168 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    previous_row_index_1_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                previous_row_index_1_reg_408 <= previous_row_index_reg_1308;
            elsif (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln35_1_reg_1328_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                previous_row_index_1_reg_408 <= row_index_reg_1342_pp1_iter2_reg;
            end if; 
        end if;
    end process;

    remained_row_index_prev_0_lcssa_reg_494_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                remained_row_index_prev_0_lcssa_reg_494 <= remained_row_index_prev_1_reg_430;
            elsif (((icmp_ln53_fu_866_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                remained_row_index_prev_0_lcssa_reg_494 <= p_Val2_6_fu_851_p3;
            end if; 
        end if;
    end process;

    remained_row_index_prev_1_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then 
                remained_row_index_prev_1_reg_430 <= remained_row_index_reg_1577;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                remained_row_index_prev_1_reg_430 <= p_Val2_6_reg_1432;
            end if; 
        end if;
    end process;

    y_all_row_prev_0_lcssa_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                y_all_row_prev_0_lcssa_reg_483 <= y_all_row_prev_2_reg_440;
            elsif (((icmp_ln53_fu_866_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                y_all_row_prev_0_lcssa_reg_483 <= y_all_row_prev_1_reg_1420;
            end if; 
        end if;
    end process;

    y_all_row_prev_2_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6))) then 
                y_all_row_prev_2_reg_440 <= y_all_row_reg_1582;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                y_all_row_prev_2_reg_440 <= y_all_row_prev_1_reg_1420;
            end if; 
        end if;
    end process;

    y_previous_break_0_lcssa_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                y_previous_break_0_lcssa_reg_460 <= y_previous_break_1_reg_1502;
            elsif (((icmp_ln53_fu_866_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                y_previous_break_0_lcssa_reg_460 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_previous_break_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_reg_1521 = ap_const_lv1_1) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6))) then 
                y_previous_break_fu_164 <= ap_phi_mux_y_all_row_prev_2_phi_fu_443_p4;
            elsif (((icmp_ln53_fu_866_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                y_previous_break_fu_164 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln26_reg_1292 <= add_ln26_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6))) then
                add_ln53_3_reg_1525 <= add_ln53_3_fu_984_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_866_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                add_ln53_reg_1461 <= add_ln53_fu_875_p2;
                gmem_0_addr_4_reg_1472 <= sext_ln57_fu_920_p1;
                gmem_1_addr_1_reg_1466 <= sext_ln53_fu_910_p1;
                trunc_ln53_reg_1455 <= trunc_ln53_fu_872_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                add_reg_1313 <= add_fu_599_p2;
                previous_row_index_reg_1308 <= gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_963_p2 = ap_const_lv1_0) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then
                ap_phi_reg_pp2_iter0_remained_row_index_1_reg_450 <= ap_phi_mux_remained_row_index_prev_1_phi_fu_433_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_1_reg_1328_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                conv_reg_1353 <= grp_fu_516_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_1_fu_645_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                empty_17_reg_1332 <= empty_17_fu_650_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                empty_17_reg_1332_pp1_iter1_reg <= empty_17_reg_1332;
                icmp_ln35_1_reg_1328 <= icmp_ln35_1_fu_645_p2;
                icmp_ln35_1_reg_1328_pp1_iter1_reg <= icmp_ln35_1_reg_1328;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                empty_17_reg_1332_pp1_iter2_reg <= empty_17_reg_1332_pp1_iter1_reg;
                empty_17_reg_1332_pp1_iter3_reg <= empty_17_reg_1332_pp1_iter2_reg;
                empty_17_reg_1332_pp1_iter4_reg <= empty_17_reg_1332_pp1_iter3_reg;
                empty_17_reg_1332_pp1_iter5_reg <= empty_17_reg_1332_pp1_iter4_reg;
                empty_17_reg_1332_pp1_iter6_reg <= empty_17_reg_1332_pp1_iter5_reg;
                empty_17_reg_1332_pp1_iter7_reg <= empty_17_reg_1332_pp1_iter6_reg;
                empty_17_reg_1332_pp1_iter8_reg <= empty_17_reg_1332_pp1_iter7_reg;
                icmp_ln35_1_reg_1328_pp1_iter2_reg <= icmp_ln35_1_reg_1328_pp1_iter1_reg;
                icmp_ln35_1_reg_1328_pp1_iter3_reg <= icmp_ln35_1_reg_1328_pp1_iter2_reg;
                icmp_ln35_1_reg_1328_pp1_iter4_reg <= icmp_ln35_1_reg_1328_pp1_iter3_reg;
                icmp_ln35_1_reg_1328_pp1_iter5_reg <= icmp_ln35_1_reg_1328_pp1_iter4_reg;
                icmp_ln35_1_reg_1328_pp1_iter6_reg <= icmp_ln35_1_reg_1328_pp1_iter5_reg;
                icmp_ln35_1_reg_1328_pp1_iter7_reg <= icmp_ln35_1_reg_1328_pp1_iter6_reg;
                icmp_ln35_1_reg_1328_pp1_iter8_reg <= icmp_ln35_1_reg_1328_pp1_iter7_reg;
                row_index_reg_1342_pp1_iter2_reg <= row_index_reg_1342;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_614_p2 = ap_const_lv1_0) and (gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                gmem_0_addr_2_reg_1322 <= sext_ln35_fu_635_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gmem_1_RVALID = ap_const_logic_0) or (gmem_0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                gmem_0_addr_3_read_reg_1380 <= gmem_0_RDATA;
                gmem_1_addr_read_reg_1385 <= gmem_1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                gmem_0_addr_4_read_reg_1487 <= gmem_0_RDATA;
                gmem_1_addr_1_read_reg_1492 <= gmem_1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_reg_1521 = ap_const_lv1_1) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                gmem_0_addr_5_reg_1535 <= sext_ln61_fu_1022_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln72_fu_1181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                gmem_0_addr_6_reg_1591 <= sext_ln74_fu_1220_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_1_reg_1288 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem_0_addr_read_reg_1297 <= gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_385_pp0_iter1_reg <= i_reg_385;
                icmp_ln26_1_reg_1288 <= icmp_ln26_1_fu_559_p2;
                icmp_ln26_1_reg_1288_pp0_iter1_reg <= icmp_ln26_1_reg_1288;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln26_reg_1241 <= icmp_ln26_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln53_1_reg_1483 <= icmp_ln53_1_fu_944_p2;
                icmp_ln53_1_reg_1483_pp2_iter1_reg <= icmp_ln53_1_reg_1483;
                icmp_ln53_1_reg_1483_pp2_iter2_reg <= icmp_ln53_1_reg_1483_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then
                icmp_ln59_reg_1521 <= icmp_ln59_fu_963_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then
                icmp_ln59_reg_1521_pp2_iter1_reg <= icmp_ln59_reg_1521;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                icmp_ln72_reg_1587 <= icmp_ln72_fu_1181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_reg_1521 = ap_const_lv1_1) and (icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                isNeg_1_reg_1556 <= add_ln340_1_fu_1066_p2(8 downto 8);
                p_Repl2_3_reg_1551 <= p_Repl2_3_fu_1058_p1;
                p_Result_5_reg_1546 <= p_Val2_3_fu_1036_p1(31 downto 31);
                ush_1_reg_1561 <= ush_1_fu_1090_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                isNeg_reg_1410 <= add_ln340_fu_753_p2(8 downto 8);
                p_Repl2_s_reg_1405 <= p_Repl2_s_fu_745_p1;
                p_Result_s_reg_1400 <= p_Val2_s_fu_723_p1(31 downto 31);
                ush_reg_1415 <= ush_fu_777_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                j_1_reg_1508 <= j_fu_168;
                y_previous_break_1_reg_1502 <= y_previous_break_fu_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                mul_reg_1530 <= grp_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                p_Val2_6_reg_1432 <= p_Val2_6_fu_851_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)))) then
                reg_519 <= x_local_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state48) or ((icmp_ln59_reg_1521 = ap_const_lv1_1) and (icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)))) then
                reg_524 <= grp_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                remained_row_index_reg_1577 <= remained_row_index_fu_1175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_1_reg_1328 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                row_index_reg_1342 <= gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                row_indices_diff_local_load_reg_1375 <= row_indices_diff_local_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_1_reg_1328_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sub_ln39_reg_1348 <= sub_ln39_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_reg_1521 = ap_const_lv1_1) and (icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                val_V_1_reg_1566 <= val_V_1_fu_1152_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                val_V_reg_1426 <= val_V_fu_839_p3;
                y_all_row_prev_1_reg_1420 <= grp_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then
                y_all_row_reg_1582 <= grp_fu_504_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln26_reg_1241, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_enable_reg_pp1_iter1, ap_CS_fsm_state37, ap_CS_fsm_state44, ap_CS_fsm_state52, ap_enable_reg_pp2_iter0, icmp_ln53_1_reg_1483, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter2, ap_CS_fsm_state78, ap_CS_fsm_state82, ap_CS_fsm_state87, icmp_ln72_reg_1587, gmem_0_AWREADY, gmem_0_WREADY, gmem_0_ARREADY, gmem_0_RVALID, gmem_0_BVALID, gmem_1_RVALID, ap_block_state2_io, icmp_ln26_1_fu_559_p2, ap_enable_reg_pp0_iter0, icmp_ln35_fu_614_p2, icmp_ln35_1_fu_645_p2, ap_enable_reg_pp1_iter0, ap_block_state37_io, ap_CS_fsm_state51, icmp_ln53_fu_866_p2, ap_block_state52_io, icmp_ln72_fu_1181_p2, ap_CS_fsm_state77, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_block_pp2_stage4_subdone, ap_block_pp2_stage6_subdone, ap_block_pp2_stage2_subdone, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone, ap_block_pp2_stage3_subdone, ap_block_pp2_stage5_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln26_reg_1241 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln26_reg_1241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln26_1_fu_559_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln26_1_fu_559_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((gmem_0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln35_fu_614_p2 = ap_const_lv1_1) and (gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                elsif (((icmp_ln35_fu_614_p2 = ap_const_lv1_0) and (gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((gmem_0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln35_1_fu_645_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter9 = ap_const_logic_1) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln35_1_fu_645_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter9 = ap_const_logic_1) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if ((not(((gmem_1_RVALID = ap_const_logic_0) or (gmem_0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((icmp_ln53_fu_866_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                if (((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((not(((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_pp2_stage4 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln53_1_reg_1483 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage4_subdone))) and (ap_const_boolean_0 = ap_block_pp2_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage5;
                elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln53_1_reg_1483 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                end if;
            when ap_ST_fsm_pp2_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage5;
                end if;
            when ap_ST_fsm_pp2_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage6;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                if (((icmp_ln72_fu_1181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state78 => 
                if (((gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((gmem_0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                if ((not(((gmem_0_BVALID = ap_const_logic_0) and (icmp_ln72_reg_1587 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_fu_599_p2 <= std_logic_vector(unsigned(n) + unsigned(ap_const_lv32_1));
    add_ln26_fu_564_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_389_p4) + unsigned(ap_const_lv16_1));
    add_ln340_1_fu_1066_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln340_1_fu_1062_p1));
    add_ln340_fu_753_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln340_fu_749_p1));
    add_ln35_1_fu_654_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_1_reg_397));
    add_ln35_fu_620_p2 <= std_logic_vector(unsigned(row_indices) + unsigned(ap_const_lv64_4));
    add_ln39_fu_665_p2 <= std_logic_vector(signed(ap_const_lv16_FFFF) + signed(empty_17_reg_1332_pp1_iter8_reg));
    add_ln53_1_fu_880_p2 <= std_logic_vector(unsigned(ap_const_lv64_4) + unsigned(values));
    add_ln53_2_fu_895_p2 <= std_logic_vector(unsigned(ap_const_lv64_4) + unsigned(col_indices));
    add_ln53_3_fu_984_p2 <= std_logic_vector(unsigned(i_2_reg_418) + unsigned(ap_const_lv31_1));
    add_ln53_fu_875_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(nnz));
    add_ln61_1_fu_1007_p2 <= std_logic_vector(unsigned(y) + unsigned(zext_ln61_fu_1003_p1));
    add_ln61_fu_990_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(j_1_reg_1508));
    add_ln74_1_fu_1205_p2 <= std_logic_vector(unsigned(zext_ln74_fu_1201_p1) + unsigned(y));
    add_ln74_fu_1187_p2 <= std_logic_vector(unsigned(j_0_lcssa_reg_472) + unsigned(ap_const_lv32_FFFFFFFF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(47);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(48);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(49);
    ap_CS_fsm_pp2_stage3 <= ap_CS_fsm(50);
    ap_CS_fsm_pp2_stage4 <= ap_CS_fsm(51);
    ap_CS_fsm_pp2_stage5 <= ap_CS_fsm(52);
    ap_CS_fsm_pp2_stage6 <= ap_CS_fsm(53);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state37 <= ap_CS_fsm(25);
    ap_CS_fsm_state42 <= ap_CS_fsm(30);
    ap_CS_fsm_state43 <= ap_CS_fsm(31);
    ap_CS_fsm_state44 <= ap_CS_fsm(32);
    ap_CS_fsm_state45 <= ap_CS_fsm(33);
    ap_CS_fsm_state46 <= ap_CS_fsm(34);
    ap_CS_fsm_state47 <= ap_CS_fsm(35);
    ap_CS_fsm_state48 <= ap_CS_fsm(36);
    ap_CS_fsm_state49 <= ap_CS_fsm(37);
    ap_CS_fsm_state50 <= ap_CS_fsm(38);
    ap_CS_fsm_state51 <= ap_CS_fsm(39);
    ap_CS_fsm_state52 <= ap_CS_fsm(40);
    ap_CS_fsm_state58 <= ap_CS_fsm(46);
    ap_CS_fsm_state76 <= ap_CS_fsm(54);
    ap_CS_fsm_state77 <= ap_CS_fsm(55);
    ap_CS_fsm_state78 <= ap_CS_fsm(56);
    ap_CS_fsm_state79 <= ap_CS_fsm(57);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(58);
    ap_CS_fsm_state81 <= ap_CS_fsm(59);
    ap_CS_fsm_state82 <= ap_CS_fsm(60);
    ap_CS_fsm_state87 <= ap_CS_fsm(65);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln26_1_reg_1288, gmem_0_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_0_RVALID = ap_const_logic_0) and (icmp_ln26_1_reg_1288 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln26_1_reg_1288, gmem_0_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_0_RVALID = ap_const_logic_0) and (icmp_ln26_1_reg_1288 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln35_1_reg_1328, gmem_0_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem_0_RVALID = ap_const_logic_0) and (icmp_ln35_1_reg_1328 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln35_1_reg_1328, gmem_0_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem_0_RVALID = ap_const_logic_0) and (icmp_ln35_1_reg_1328 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage1_00001_assign_proc : process(ap_enable_reg_pp2_iter0, icmp_ln53_1_reg_1483, gmem_0_RVALID, gmem_1_RVALID)
    begin
                ap_block_pp2_stage1_00001 <= ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (((gmem_1_RVALID = ap_const_logic_0) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0)) or ((gmem_0_RVALID = ap_const_logic_0) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0))));
    end process;


    ap_block_pp2_stage1_11001_assign_proc : process(ap_enable_reg_pp2_iter0, icmp_ln53_1_reg_1483, gmem_0_RVALID, gmem_1_RVALID)
    begin
                ap_block_pp2_stage1_11001 <= ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (((gmem_1_RVALID = ap_const_logic_0) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0)) or ((gmem_0_RVALID = ap_const_logic_0) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0))));
    end process;


    ap_block_pp2_stage1_subdone_assign_proc : process(ap_enable_reg_pp2_iter0, icmp_ln53_1_reg_1483, gmem_0_RVALID, gmem_1_RVALID)
    begin
                ap_block_pp2_stage1_subdone <= ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (((gmem_1_RVALID = ap_const_logic_0) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0)) or ((gmem_0_RVALID = ap_const_logic_0) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0))));
    end process;

        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage2_11001_assign_proc : process(ap_enable_reg_pp2_iter2, gmem_0_BVALID, ap_predicate_op367_writeresp_state75)
    begin
                ap_block_pp2_stage2_11001 <= ((ap_predicate_op367_writeresp_state75 = ap_const_boolean_1) and (gmem_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage2_subdone_assign_proc : process(ap_enable_reg_pp2_iter2, gmem_0_BVALID, ap_predicate_op367_writeresp_state75)
    begin
                ap_block_pp2_stage2_subdone <= ((ap_predicate_op367_writeresp_state75 = ap_const_boolean_1) and (gmem_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage3_11001_assign_proc : process(ap_enable_reg_pp2_iter1, ap_block_state69_io)
    begin
                ap_block_pp2_stage3_11001 <= ((ap_const_boolean_1 = ap_block_state69_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage3_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, ap_block_state69_io)
    begin
                ap_block_pp2_stage3_subdone <= ((ap_const_boolean_1 = ap_block_state69_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage4_11001_assign_proc : process(ap_enable_reg_pp2_iter1, ap_block_state70_io)
    begin
                ap_block_pp2_stage4_11001 <= ((ap_const_boolean_1 = ap_block_state70_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage4_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, ap_block_state70_io)
    begin
                ap_block_pp2_stage4_subdone <= ((ap_const_boolean_1 = ap_block_state70_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage6_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln26_1_reg_1288, gmem_0_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((gmem_0_RVALID = ap_const_logic_0) and (icmp_ln26_1_reg_1288 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_pp1_stage0_iter1_assign_proc : process(icmp_ln35_1_reg_1328, gmem_0_RVALID)
    begin
                ap_block_state28_pp1_stage0_iter1 <= ((gmem_0_RVALID = ap_const_logic_0) and (icmp_ln35_1_reg_1328 = ap_const_lv1_0));
    end process;

        ap_block_state29_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(icmp_ln26_reg_1241, gmem_0_ARREADY)
    begin
                ap_block_state2_io <= ((gmem_0_ARREADY = ap_const_logic_0) and (icmp_ln26_reg_1241 = ap_const_lv1_0));
    end process;

        ap_block_state30_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state37_io_assign_proc : process(gmem_0_ARREADY, gmem_1_ARREADY)
    begin
                ap_block_state37_io <= ((gmem_1_ARREADY = ap_const_logic_0) or (gmem_0_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state44_assign_proc : process(gmem_0_RVALID, gmem_1_RVALID)
    begin
                ap_block_state44 <= ((gmem_1_RVALID = ap_const_logic_0) or (gmem_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state52_io_assign_proc : process(gmem_0_ARREADY, gmem_1_ARREADY)
    begin
                ap_block_state52_io <= ((gmem_1_ARREADY = ap_const_logic_0) or (gmem_0_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state59_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state60_pp2_stage1_iter0_assign_proc : process(icmp_ln53_1_reg_1483, gmem_0_RVALID, gmem_1_RVALID)
    begin
                ap_block_state60_pp2_stage1_iter0 <= (((gmem_1_RVALID = ap_const_logic_0) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0)) or ((gmem_0_RVALID = ap_const_logic_0) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0)));
    end process;

        ap_block_state61_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp2_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp2_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp2_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state69_io_assign_proc : process(gmem_0_AWREADY, ap_predicate_op349_writereq_state69)
    begin
                ap_block_state69_io <= ((ap_predicate_op349_writereq_state69 = ap_const_boolean_1) and (gmem_0_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state69_pp2_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state70_io_assign_proc : process(gmem_0_WREADY, ap_predicate_op355_write_state70)
    begin
                ap_block_state70_io <= ((ap_predicate_op355_write_state70 = ap_const_boolean_1) and (gmem_0_WREADY = ap_const_logic_0));
    end process;

        ap_block_state70_pp2_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp2_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp2_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state75_pp2_stage2_iter2_assign_proc : process(gmem_0_BVALID, ap_predicate_op367_writeresp_state75)
    begin
                ap_block_state75_pp2_stage2_iter2 <= ((ap_predicate_op367_writeresp_state75 = ap_const_boolean_1) and (gmem_0_BVALID = ap_const_logic_0));
    end process;


    ap_block_state87_assign_proc : process(icmp_ln72_reg_1587, gmem_0_BVALID)
    begin
                ap_block_state87 <= ((gmem_0_BVALID = ap_const_logic_0) and (icmp_ln72_reg_1587 = ap_const_lv1_1));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln26_1_fu_559_p2)
    begin
        if ((icmp_ln26_1_fu_559_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state27_assign_proc : process(icmp_ln35_1_fu_645_p2)
    begin
        if ((icmp_ln35_1_fu_645_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state27 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state63_assign_proc : process(icmp_ln53_1_reg_1483)
    begin
        if ((icmp_ln53_1_reg_1483 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state63 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state63 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state87, icmp_ln72_reg_1587, gmem_0_BVALID)
    begin
        if ((not(((gmem_0_BVALID = ap_const_logic_0) and (icmp_ln72_reg_1587 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9)
    begin
        if (((ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_422_p4_assign_proc : process(icmp_ln53_1_reg_1483, ap_enable_reg_pp2_iter1, i_2_reg_418, ap_CS_fsm_pp2_stage0, add_ln53_3_reg_1525, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_2_phi_fu_422_p4 <= add_ln53_3_reg_1525;
        else 
            ap_phi_mux_i_2_phi_fu_422_p4 <= i_2_reg_418;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_389_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln26_1_reg_1288, i_reg_385, add_ln26_reg_1292)
    begin
        if (((icmp_ln26_1_reg_1288 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_389_p4 <= add_ln26_reg_1292;
        else 
            ap_phi_mux_i_phi_fu_389_p4 <= i_reg_385;
        end if; 
    end process;


    ap_phi_mux_previous_row_index_1_phi_fu_411_p4_assign_proc : process(ap_block_pp1_stage0, previous_row_index_1_reg_408, icmp_ln35_1_reg_1328_pp1_iter2_reg, row_index_reg_1342_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln35_1_reg_1328_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_previous_row_index_1_phi_fu_411_p4 <= row_index_reg_1342_pp1_iter2_reg;
        else 
            ap_phi_mux_previous_row_index_1_phi_fu_411_p4 <= previous_row_index_1_reg_408;
        end if; 
    end process;


    ap_phi_mux_remained_row_index_prev_1_phi_fu_433_p4_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln53_1_reg_1483_pp2_iter1_reg, remained_row_index_prev_1_reg_430, ap_CS_fsm_pp2_stage5, remained_row_index_reg_1577, ap_block_pp2_stage5)
    begin
        if (((icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5))) then 
            ap_phi_mux_remained_row_index_prev_1_phi_fu_433_p4 <= remained_row_index_reg_1577;
        else 
            ap_phi_mux_remained_row_index_prev_1_phi_fu_433_p4 <= remained_row_index_prev_1_reg_430;
        end if; 
    end process;


    ap_phi_mux_y_all_row_prev_2_phi_fu_443_p4_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln53_1_reg_1483_pp2_iter1_reg, y_all_row_prev_2_reg_440, ap_CS_fsm_pp2_stage6, y_all_row_reg_1582, ap_block_pp2_stage6)
    begin
        if (((icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6))) then 
            ap_phi_mux_y_all_row_prev_2_phi_fu_443_p4 <= y_all_row_reg_1582;
        else 
            ap_phi_mux_y_all_row_prev_2_phi_fu_443_p4 <= y_all_row_prev_2_reg_440;
        end if; 
    end process;


    ap_predicate_op349_writereq_state69_assign_proc : process(icmp_ln53_1_reg_1483_pp2_iter1_reg, icmp_ln59_reg_1521)
    begin
                ap_predicate_op349_writereq_state69 <= ((icmp_ln59_reg_1521 = ap_const_lv1_1) and (icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op355_write_state70_assign_proc : process(icmp_ln53_1_reg_1483_pp2_iter1_reg, icmp_ln59_reg_1521)
    begin
                ap_predicate_op355_write_state70 <= ((icmp_ln59_reg_1521 = ap_const_lv1_1) and (icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op367_writeresp_state75_assign_proc : process(icmp_ln53_1_reg_1483_pp2_iter2_reg, icmp_ln59_reg_1521_pp2_iter1_reg)
    begin
                ap_predicate_op367_writeresp_state75 <= ((icmp_ln59_reg_1521_pp2_iter1_reg = ap_const_lv1_1) and (icmp_ln53_1_reg_1483_pp2_iter2_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state87, icmp_ln72_reg_1587, gmem_0_BVALID)
    begin
        if ((not(((gmem_0_BVALID = ap_const_logic_0) and (icmp_ln72_reg_1587 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln47_fu_719_p1 <= gmem_0_addr_3_read_reg_1380;
    bitcast_ln57_fu_959_p1 <= gmem_0_addr_4_read_reg_1487;
    bitcast_ln61_fu_1170_p1 <= reg_524;
    bitcast_ln74_fu_1230_p1 <= reg_524;
    empty_17_fu_650_p1 <= i_1_reg_397(16 - 1 downto 0);

    gmem_0_ARADDR_assign_proc : process(ap_CS_fsm_state2, icmp_ln26_reg_1241, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state37, ap_CS_fsm_state52, gmem_0_ARREADY, ap_block_state2_io, gmem_0_addr_2_reg_1322, ap_block_state37_io, gmem_0_addr_4_reg_1472, ap_block_state52_io, sext_ln26_fu_544_p1, sext_ln33_fu_588_p1, sext_ln47_fu_684_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            gmem_0_ARADDR <= gmem_0_addr_4_reg_1472;
        elsif (((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_0_ARADDR <= sext_ln47_fu_684_p1;
        elsif (((gmem_0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            gmem_0_ARADDR <= gmem_0_addr_2_reg_1322;
        elsif (((gmem_0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_0_ARADDR <= sext_ln33_fu_588_p1;
        elsif (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln26_reg_1241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_0_ARADDR <= sext_ln26_fu_544_p1;
        else 
            gmem_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_0_ARLEN_assign_proc : process(n, m, ap_CS_fsm_state2, icmp_ln26_reg_1241, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state37, ap_CS_fsm_state52, gmem_0_ARREADY, ap_block_state2_io, ap_block_state37_io, zext_ln53_fu_940_p1, ap_block_state52_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            gmem_0_ARLEN <= zext_ln53_fu_940_p1;
        elsif (((gmem_0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            gmem_0_ARLEN <= n;
        elsif ((((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((gmem_0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            gmem_0_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln26_reg_1241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_0_ARLEN <= m;
        else 
            gmem_0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_0_ARVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln26_reg_1241, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state37, ap_CS_fsm_state52, gmem_0_ARREADY, ap_block_state2_io, ap_block_state37_io, ap_block_state52_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((gmem_0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((gmem_0_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln26_reg_1241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem_0_ARVALID <= ap_const_logic_1;
        else 
            gmem_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_0_AWADDR_assign_proc : process(ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_CS_fsm_state78, gmem_0_AWREADY, ap_predicate_op349_writereq_state69, ap_block_pp2_stage3_11001, gmem_0_addr_5_reg_1535, gmem_0_addr_6_reg_1591)
    begin
        if (((gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            gmem_0_AWADDR <= gmem_0_addr_6_reg_1591;
        elsif (((ap_predicate_op349_writereq_state69 = ap_const_boolean_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            gmem_0_AWADDR <= gmem_0_addr_5_reg_1535;
        else 
            gmem_0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_0_AWVALID_assign_proc : process(ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_CS_fsm_state78, gmem_0_AWREADY, ap_predicate_op349_writereq_state69, ap_block_pp2_stage3_11001)
    begin
        if ((((ap_predicate_op349_writereq_state69 = ap_const_boolean_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            gmem_0_AWVALID <= ap_const_logic_1;
        else 
            gmem_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_0_BREADY_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter2, ap_CS_fsm_state87, icmp_ln72_reg_1587, gmem_0_BVALID, ap_predicate_op367_writeresp_state75, ap_block_pp2_stage2_11001)
    begin
        if ((((ap_predicate_op367_writeresp_state75 = ap_const_boolean_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)) or (not(((gmem_0_BVALID = ap_const_logic_0) and (icmp_ln72_reg_1587 = ap_const_lv1_1))) and (icmp_ln72_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87)))) then 
            gmem_0_BREADY <= ap_const_logic_1;
        else 
            gmem_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln26_1_reg_1288, ap_CS_fsm_state19, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln35_1_reg_1328, ap_CS_fsm_state44, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, icmp_ln53_1_reg_1483, gmem_0_RVALID, gmem_1_RVALID, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage1_11001)
    begin
        if (((not(((gmem_1_RVALID = ap_const_logic_0) or (gmem_0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((gmem_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((icmp_ln35_1_reg_1328 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln26_1_reg_1288 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem_0_RREADY <= ap_const_logic_1;
        else 
            gmem_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_0_WDATA_assign_proc : process(ap_enable_reg_pp2_iter1, ap_CS_fsm_pp2_stage4, ap_CS_fsm_state82, ap_predicate_op355_write_state70, bitcast_ln61_fu_1170_p1, ap_block_pp2_stage4_01001, bitcast_ln74_fu_1230_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            gmem_0_WDATA <= bitcast_ln74_fu_1230_p1;
        elsif (((ap_predicate_op355_write_state70 = ap_const_boolean_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage4_01001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            gmem_0_WDATA <= bitcast_ln61_fu_1170_p1;
        else 
            gmem_0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_0_WVALID_assign_proc : process(ap_enable_reg_pp2_iter1, ap_CS_fsm_pp2_stage4, ap_CS_fsm_state82, gmem_0_WREADY, ap_predicate_op355_write_state70, ap_block_pp2_stage4_11001)
    begin
        if ((((ap_predicate_op355_write_state70 = ap_const_boolean_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)) or ((gmem_0_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)))) then 
            gmem_0_WVALID <= ap_const_logic_1;
        else 
            gmem_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_0_blk_n_AR_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state2, icmp_ln26_reg_1241, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state37, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln26_reg_1241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem_0_blk_n_AR <= m_axi_gmem_0_ARREADY;
        else 
            gmem_0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_0_blk_n_AW_assign_proc : process(m_axi_gmem_0_AWREADY, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage3, icmp_ln53_1_reg_1483_pp2_iter1_reg, icmp_ln59_reg_1521, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or ((icmp_ln59_reg_1521 = ap_const_lv1_1) and (icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)))) then 
            gmem_0_blk_n_AW <= m_axi_gmem_0_AWREADY;
        else 
            gmem_0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_0_blk_n_B_assign_proc : process(m_axi_gmem_0_BVALID, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter2, ap_block_pp2_stage2, icmp_ln53_1_reg_1483_pp2_iter2_reg, icmp_ln59_reg_1521_pp2_iter1_reg, ap_CS_fsm_state87, icmp_ln72_reg_1587)
    begin
        if ((((icmp_ln72_reg_1587 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87)) or ((icmp_ln59_reg_1521_pp2_iter1_reg = ap_const_lv1_1) and (icmp_ln53_1_reg_1483_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)))) then 
            gmem_0_blk_n_B <= m_axi_gmem_0_BVALID;
        else 
            gmem_0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_0_blk_n_R_assign_proc : process(m_axi_gmem_0_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln26_1_reg_1288, ap_CS_fsm_state19, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln35_1_reg_1328, ap_CS_fsm_state44, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1, icmp_ln53_1_reg_1483)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((icmp_ln35_1_reg_1328 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln26_1_reg_1288 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem_0_blk_n_R <= m_axi_gmem_0_RVALID;
        else 
            gmem_0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_0_blk_n_W_assign_proc : process(m_axi_gmem_0_WREADY, ap_enable_reg_pp2_iter1, icmp_ln53_1_reg_1483_pp2_iter1_reg, icmp_ln59_reg_1521, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or ((icmp_ln59_reg_1521 = ap_const_lv1_1) and (icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)))) then 
            gmem_0_blk_n_W <= m_axi_gmem_0_WREADY;
        else 
            gmem_0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    gmem_1_ARADDR_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state52, ap_block_state37_io, gmem_1_addr_1_reg_1466, ap_block_state52_io, sext_ln47_1_fu_704_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            gmem_1_ARADDR <= gmem_1_addr_1_reg_1466;
        elsif (((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_1_ARADDR <= sext_ln47_1_fu_704_p1;
        else 
            gmem_1_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_1_ARLEN_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state52, ap_block_state37_io, add_ln53_reg_1461, ap_block_state52_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            gmem_1_ARLEN <= add_ln53_reg_1461;
        elsif (((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_1_ARLEN <= ap_const_lv32_1;
        else 
            gmem_1_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_1_ARVALID_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state52, ap_block_state37_io, ap_block_state52_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state52_io) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            gmem_1_ARVALID <= ap_const_logic_1;
        else 
            gmem_1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_1_RREADY_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, icmp_ln53_1_reg_1483, gmem_0_RVALID, gmem_1_RVALID, ap_block_pp2_stage1_11001)
    begin
        if (((not(((gmem_1_RVALID = ap_const_logic_0) or (gmem_0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            gmem_1_RREADY <= ap_const_logic_1;
        else 
            gmem_1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_1_blk_n_AR_assign_proc : process(m_axi_gmem_1_ARREADY, ap_CS_fsm_state37, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_1_blk_n_AR <= m_axi_gmem_1_ARREADY;
        else 
            gmem_1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_1_blk_n_R_assign_proc : process(m_axi_gmem_1_RVALID, ap_CS_fsm_state44, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1, icmp_ln53_1_reg_1483)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or ((icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            gmem_1_blk_n_R <= m_axi_gmem_1_RVALID;
        else 
            gmem_1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_504_ce_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage4, ap_CS_fsm_pp2_stage2, ap_CS_fsm_state78, gmem_0_AWREADY, gmem_0_RVALID, gmem_1_RVALID, ap_CS_fsm_state46, ap_block_pp2_stage3_11001, ap_CS_fsm_state48, ap_CS_fsm_state81, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp2_stage1_11001, ap_block_pp2_stage2_11001, ap_block_pp2_stage4_11001, ap_CS_fsm_pp2_stage5, ap_block_pp2_stage5_11001, ap_CS_fsm_pp2_stage6, ap_block_pp2_stage6_11001, ap_CS_fsm_state77, ap_CS_fsm_state79, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or ((ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6)) or ((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or (not(((gmem_1_RVALID = ap_const_logic_0) or (gmem_0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((gmem_0_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            grp_fu_504_ce <= ap_const_logic_1;
        else 
            grp_fu_504_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_504_opcode_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, icmp_ln53_1_reg_1483, ap_enable_reg_pp2_iter1, icmp_ln53_1_reg_1483_pp2_iter1_reg, icmp_ln59_reg_1521, gmem_0_RVALID, gmem_1_RVALID, ap_CS_fsm_pp2_stage6, icmp_ln72_fu_1181_p2, ap_CS_fsm_state77, ap_block_pp2_stage1_00001, ap_block_pp2_stage6_00001)
    begin
        if ((((icmp_ln72_fu_1181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77)) or ((icmp_ln59_reg_1521 = ap_const_lv1_1) and (icmp_ln53_1_reg_1483 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage6_00001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6)))) then 
            grp_fu_504_opcode <= ap_const_lv2_1;
        elsif (((not(((gmem_1_RVALID = ap_const_logic_0) or (gmem_0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((icmp_ln53_1_reg_1483_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_00001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            grp_fu_504_opcode <= ap_const_lv2_0;
        else 
            grp_fu_504_opcode <= "XX";
        end if; 
    end process;


    grp_fu_504_p0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1, ap_enable_reg_pp2_iter1, y_all_row_prev_2_reg_440, row_indices_diff_local_load_reg_1375, ap_CS_fsm_pp2_stage6, ap_CS_fsm_state77, ap_phi_mux_y_all_row_prev_2_phi_fu_443_p4, ap_block_pp2_stage6, y_all_row_prev_0_lcssa_reg_483)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_504_p0 <= y_all_row_prev_0_lcssa_reg_483;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_fu_504_p0 <= y_all_row_prev_2_reg_440;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6))) then 
            grp_fu_504_p0 <= ap_phi_mux_y_all_row_prev_2_phi_fu_443_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_504_p0 <= row_indices_diff_local_load_reg_1375;
        else 
            grp_fu_504_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_504_p1_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1, ap_enable_reg_pp2_iter1, y_previous_break_1_reg_1502, ap_CS_fsm_pp2_stage6, mul_reg_1530, ap_CS_fsm_state77, ap_block_pp2_stage6, y_previous_break_0_lcssa_reg_460)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_504_p1 <= y_previous_break_0_lcssa_reg_460;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_fu_504_p1 <= mul_reg_1530;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6))) then 
            grp_fu_504_p1 <= y_previous_break_1_reg_1502;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_504_p1 <= ap_const_lv32_BF800000;
        else 
            grp_fu_504_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_512_ce_assign_proc : process(ap_CS_fsm_pp2_stage4, ap_CS_fsm_state48, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp2_stage4_11001, ap_CS_fsm_pp2_stage5, ap_block_pp2_stage5_11001, ap_CS_fsm_pp2_stage6, ap_block_pp2_stage6_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state48) or ((ap_const_boolean_0 = ap_block_pp2_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage6)) or ((ap_const_boolean_0 = ap_block_pp2_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage5)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            grp_fu_512_ce <= ap_const_logic_1;
        else 
            grp_fu_512_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_512_p0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4, bitcast_ln47_fu_719_p1, ap_CS_fsm_state47, bitcast_ln57_fu_959_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            grp_fu_512_p0 <= bitcast_ln57_fu_959_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_512_p0 <= bitcast_ln47_fu_719_p1;
        else 
            grp_fu_512_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_516_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_516_ce <= ap_const_logic_1;
        else 
            grp_fu_516_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_cast1_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_385_pp0_iter1_reg),64));
    i_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_389_p4),32));
    icmp_ln26_1_fu_559_p2 <= "1" when (i_cast_fu_555_p1 = m) else "0";
    icmp_ln26_fu_528_p2 <= "1" when (m = ap_const_lv32_0) else "0";
    icmp_ln35_1_fu_645_p2 <= "1" when (i_1_reg_397 = add_reg_1313) else "0";
    icmp_ln35_fu_614_p2 <= "1" when (tmp_fu_604_p4 = ap_const_lv31_0) else "0";
    icmp_ln53_1_fu_944_p2 <= "1" when (ap_phi_mux_i_2_phi_fu_422_p4 = trunc_ln53_reg_1455) else "0";
    icmp_ln53_fu_866_p2 <= "1" when (signed(tmp_6_fu_857_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln59_fu_963_p2 <= "1" when (ap_phi_mux_remained_row_index_prev_1_phi_fu_433_p4 = ap_const_lv32_0) else "0";
    icmp_ln72_fu_1181_p2 <= "1" when (remained_row_index_prev_0_lcssa_reg_494 = ap_const_lv32_0) else "0";
    isNeg_1_fu_1072_p3 <= add_ln340_1_fu_1066_p2(8 downto 8);
    isNeg_fu_759_p3 <= add_ln340_fu_753_p2(8 downto 8);
    j_2_fu_969_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j_1_reg_1508));
    mantissa_V_1_fu_1098_p4 <= ((ap_const_lv1_1 & p_Repl2_3_reg_1551) & ap_const_lv1_0);
    mantissa_V_fu_785_p4 <= ((ap_const_lv1_1 & p_Repl2_s_reg_1405) & ap_const_lv1_0);
    p_Repl2_3_fu_1058_p1 <= p_Val2_3_fu_1036_p1(23 - 1 downto 0);
    p_Repl2_4_fu_735_p4 <= p_Val2_s_fu_723_p1(30 downto 23);
    p_Repl2_5_fu_1048_p4 <= p_Val2_3_fu_1036_p1(30 downto 23);
    p_Repl2_s_fu_745_p1 <= p_Val2_s_fu_723_p1(23 - 1 downto 0);
    p_Val2_3_fu_1036_p1 <= row_indices_diff_local_q0;
    p_Val2_6_fu_851_p3 <= 
        result_V_1_fu_846_p2 when (p_Result_s_reg_1400(0) = '1') else 
        val_V_reg_1426;
    p_Val2_7_fu_1164_p3 <= 
        result_V_3_fu_1159_p2 when (p_Result_5_reg_1546(0) = '1') else 
        val_V_1_reg_1566;
    p_Val2_s_fu_723_p1 <= reg_524;
    r_V_1_fu_811_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_794_p1),to_integer(unsigned('0' & sh_prom_i_i_i_cast_cast_cast_cast_fu_801_p1(31-1 downto 0)))));
    r_V_2_fu_1118_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_1107_p1),to_integer(unsigned('0' & sh_prom_i_i_i14_cast_cast_cast_cast_fu_1114_p1(31-1 downto 0)))));
    r_V_3_fu_1124_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_1107_p1),to_integer(unsigned('0' & sh_prom_i_i_i14_cast_cast_cast_cast_fu_1114_p1(31-1 downto 0)))));
    r_V_fu_805_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_794_p1),to_integer(unsigned('0' & sh_prom_i_i_i_cast_cast_cast_cast_fu_801_p1(31-1 downto 0)))));
    remained_row_index_fu_1175_p2 <= std_logic_vector(unsigned(ap_phi_reg_pp2_iter1_remained_row_index_1_reg_450) + unsigned(ap_const_lv32_FFFFFFFF));
    result_V_1_fu_846_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_V_reg_1426));
    result_V_3_fu_1159_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_V_1_reg_1566));

    row_indices_diff_local_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state42, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter9, ap_block_pp2_stage0, zext_ln39_fu_670_p1, zext_ln63_fu_1032_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            row_indices_diff_local_address0 <= zext_ln63_fu_1032_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            row_indices_diff_local_address0 <= ap_const_lv64_0(16 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            row_indices_diff_local_address0 <= zext_ln39_fu_670_p1(16 - 1 downto 0);
        else 
            row_indices_diff_local_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    row_indices_diff_local_ce0_assign_proc : process(ap_enable_reg_pp2_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_state42, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            row_indices_diff_local_ce0 <= ap_const_logic_1;
        else 
            row_indices_diff_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_indices_diff_local_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln35_1_reg_1328_pp1_iter8_reg, ap_enable_reg_pp1_iter9)
    begin
        if (((ap_enable_reg_pp1_iter9 = ap_const_logic_1) and (icmp_ln35_1_reg_1328_pp1_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            row_indices_diff_local_we0 <= ap_const_logic_1;
        else 
            row_indices_diff_local_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1311_1_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_1080_p2),9));

        sext_ln1311_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_767_p2),9));

        sext_ln26_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_534_p4),64));

        sext_ln33_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_579_p4),64));

        sext_ln35_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_625_p4),64));

        sext_ln47_1_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln47_1_fu_695_p4),64));

        sext_ln47_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_675_p4),64));

        sext_ln53_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln53_1_fu_900_p4),64));

        sext_ln57_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_885_p4),64));

        sext_ln61_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_1012_p4),64));

        sext_ln74_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_fu_1210_p4),64));

    sh_prom_i_i_i14_cast_cast_cast_cast_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i14_cast_cast_cast_fu_1111_p1),79));
        sh_prom_i_i_i14_cast_cast_cast_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_reg_1561),32));

    sh_prom_i_i_i_cast_cast_cast_cast_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_cast_cast_cast_fu_798_p1),79));
        sh_prom_i_i_i_cast_cast_cast_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1415),32));

    shl_ln1_fu_1193_p3 <= (add_ln74_fu_1187_p2 & ap_const_lv2_0);
    shl_ln_fu_995_p3 <= (add_ln61_fu_990_p2 & ap_const_lv2_0);
    sub_ln1311_1_fu_1080_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(p_Repl2_5_fu_1048_p4));
    sub_ln1311_fu_767_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(p_Repl2_4_fu_735_p4));
    sub_ln39_fu_660_p2 <= std_logic_vector(unsigned(row_index_reg_1342) - unsigned(ap_phi_mux_previous_row_index_1_phi_fu_411_p4));
    tmp_1_fu_829_p4 <= r_V_1_fu_811_p2(55 downto 24);
    tmp_3_fu_1142_p4 <= r_V_3_fu_1124_p2(55 downto 24);
    tmp_5_fu_817_p3 <= r_V_fu_805_p2(24 downto 24);
    tmp_6_fu_857_p4 <= nnz(31 downto 1);
    tmp_9_fu_1130_p3 <= r_V_2_fu_1118_p2(24 downto 24);
    tmp_fu_604_p4 <= add_fu_599_p2(31 downto 1);
    trunc_ln1_fu_579_p4 <= row_indices(63 downto 2);
    trunc_ln2_fu_625_p4 <= add_ln35_fu_620_p2(63 downto 2);
    trunc_ln3_fu_675_p4 <= values(63 downto 2);
    trunc_ln47_1_fu_695_p4 <= col_indices(63 downto 2);
    trunc_ln4_fu_885_p4 <= add_ln53_1_fu_880_p2(63 downto 2);
    trunc_ln53_1_fu_900_p4 <= add_ln53_2_fu_895_p2(63 downto 2);
    trunc_ln53_fu_872_p1 <= nnz(31 - 1 downto 0);
    trunc_ln5_fu_1012_p4 <= add_ln61_1_fu_1007_p2(63 downto 2);
    trunc_ln6_fu_1210_p4 <= add_ln74_1_fu_1205_p2(63 downto 2);
    trunc_ln_fu_534_p4 <= x(63 downto 2);
    ush_1_fu_1090_p3 <= 
        sext_ln1311_1_fu_1086_p1 when (isNeg_1_fu_1072_p3(0) = '1') else 
        add_ln340_1_fu_1066_p2;
    ush_fu_777_p3 <= 
        sext_ln1311_fu_773_p1 when (isNeg_fu_759_p3(0) = '1') else 
        add_ln340_fu_753_p2;
    val_V_1_fu_1152_p3 <= 
        zext_ln662_1_fu_1138_p1 when (isNeg_1_reg_1556(0) = '1') else 
        tmp_3_fu_1142_p4;
    val_V_fu_839_p3 <= 
        zext_ln662_fu_825_p1 when (isNeg_reg_1410(0) = '1') else 
        tmp_1_fu_829_p4;

    x_local_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2, ap_CS_fsm_state45, ap_enable_reg_pp0_iter2, i_cast1_fu_570_p1, zext_ln47_fu_715_p1, zext_ln57_fu_949_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            x_local_address0 <= zext_ln57_fu_949_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            x_local_address0 <= zext_ln47_fu_715_p1(16 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            x_local_address0 <= i_cast1_fu_570_p1(16 - 1 downto 0);
        else 
            x_local_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x_local_ce0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_state45, ap_block_pp2_stage2_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            x_local_ce0 <= ap_const_logic_1;
        else 
            x_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_local_d0 <= gmem_0_addr_read_reg_1297;

    x_local_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln26_1_reg_1288_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln26_1_reg_1288_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_local_we0 <= ap_const_logic_1;
        else 
            x_local_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln15_1_fu_1107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_1098_p4),79));
    zext_ln15_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_785_p4),79));
    zext_ln340_1_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Repl2_5_fu_1048_p4),9));
    zext_ln340_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Repl2_4_fu_735_p4),9));
    zext_ln39_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_fu_665_p2),64));
    zext_ln47_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem_1_addr_read_reg_1385),64));
    zext_ln53_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln53_reg_1455),32));
    zext_ln57_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem_1_addr_1_read_reg_1492),64));
    zext_ln61_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_995_p3),64));
    zext_ln63_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_1508),64));
    zext_ln662_1_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1130_p3),32));
    zext_ln662_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_817_p3),32));
    zext_ln74_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_1193_p3),64));
end behav;
