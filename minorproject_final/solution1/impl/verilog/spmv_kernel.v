// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="spmv_kernel_spmv_kernel,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=875554,HLS_SYN_TPT=none,HLS_SYN_MEM=260,HLS_SYN_DSP=0,HLS_SYN_FF=3351,HLS_SYN_LUT=4981,HLS_VERSION=2020_1}" *)

module spmv_kernel (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        m_axi_gmem_1_AWVALID,
        m_axi_gmem_1_AWREADY,
        m_axi_gmem_1_AWADDR,
        m_axi_gmem_1_AWID,
        m_axi_gmem_1_AWLEN,
        m_axi_gmem_1_AWSIZE,
        m_axi_gmem_1_AWBURST,
        m_axi_gmem_1_AWLOCK,
        m_axi_gmem_1_AWCACHE,
        m_axi_gmem_1_AWPROT,
        m_axi_gmem_1_AWQOS,
        m_axi_gmem_1_AWREGION,
        m_axi_gmem_1_AWUSER,
        m_axi_gmem_1_WVALID,
        m_axi_gmem_1_WREADY,
        m_axi_gmem_1_WDATA,
        m_axi_gmem_1_WSTRB,
        m_axi_gmem_1_WLAST,
        m_axi_gmem_1_WID,
        m_axi_gmem_1_WUSER,
        m_axi_gmem_1_ARVALID,
        m_axi_gmem_1_ARREADY,
        m_axi_gmem_1_ARADDR,
        m_axi_gmem_1_ARID,
        m_axi_gmem_1_ARLEN,
        m_axi_gmem_1_ARSIZE,
        m_axi_gmem_1_ARBURST,
        m_axi_gmem_1_ARLOCK,
        m_axi_gmem_1_ARCACHE,
        m_axi_gmem_1_ARPROT,
        m_axi_gmem_1_ARQOS,
        m_axi_gmem_1_ARREGION,
        m_axi_gmem_1_ARUSER,
        m_axi_gmem_1_RVALID,
        m_axi_gmem_1_RREADY,
        m_axi_gmem_1_RDATA,
        m_axi_gmem_1_RLAST,
        m_axi_gmem_1_RID,
        m_axi_gmem_1_RUSER,
        m_axi_gmem_1_RRESP,
        m_axi_gmem_1_BVALID,
        m_axi_gmem_1_BREADY,
        m_axi_gmem_1_BRESP,
        m_axi_gmem_1_BID,
        m_axi_gmem_1_BUSER,
        values,
        col_indices,
        row_indices,
        x,
        y,
        n,
        m,
        nnz
);

parameter    ap_ST_fsm_state1 = 66'd1;
parameter    ap_ST_fsm_state2 = 66'd2;
parameter    ap_ST_fsm_state3 = 66'd4;
parameter    ap_ST_fsm_state4 = 66'd8;
parameter    ap_ST_fsm_state5 = 66'd16;
parameter    ap_ST_fsm_state6 = 66'd32;
parameter    ap_ST_fsm_state7 = 66'd64;
parameter    ap_ST_fsm_state8 = 66'd128;
parameter    ap_ST_fsm_pp0_stage0 = 66'd256;
parameter    ap_ST_fsm_state12 = 66'd512;
parameter    ap_ST_fsm_state13 = 66'd1024;
parameter    ap_ST_fsm_state14 = 66'd2048;
parameter    ap_ST_fsm_state15 = 66'd4096;
parameter    ap_ST_fsm_state16 = 66'd8192;
parameter    ap_ST_fsm_state17 = 66'd16384;
parameter    ap_ST_fsm_state18 = 66'd32768;
parameter    ap_ST_fsm_state19 = 66'd65536;
parameter    ap_ST_fsm_state20 = 66'd131072;
parameter    ap_ST_fsm_state21 = 66'd262144;
parameter    ap_ST_fsm_state22 = 66'd524288;
parameter    ap_ST_fsm_state23 = 66'd1048576;
parameter    ap_ST_fsm_state24 = 66'd2097152;
parameter    ap_ST_fsm_state25 = 66'd4194304;
parameter    ap_ST_fsm_state26 = 66'd8388608;
parameter    ap_ST_fsm_pp1_stage0 = 66'd16777216;
parameter    ap_ST_fsm_state37 = 66'd33554432;
parameter    ap_ST_fsm_state38 = 66'd67108864;
parameter    ap_ST_fsm_state39 = 66'd134217728;
parameter    ap_ST_fsm_state40 = 66'd268435456;
parameter    ap_ST_fsm_state41 = 66'd536870912;
parameter    ap_ST_fsm_state42 = 66'd1073741824;
parameter    ap_ST_fsm_state43 = 66'd2147483648;
parameter    ap_ST_fsm_state44 = 66'd4294967296;
parameter    ap_ST_fsm_state45 = 66'd8589934592;
parameter    ap_ST_fsm_state46 = 66'd17179869184;
parameter    ap_ST_fsm_state47 = 66'd34359738368;
parameter    ap_ST_fsm_state48 = 66'd68719476736;
parameter    ap_ST_fsm_state49 = 66'd137438953472;
parameter    ap_ST_fsm_state50 = 66'd274877906944;
parameter    ap_ST_fsm_state51 = 66'd549755813888;
parameter    ap_ST_fsm_state52 = 66'd1099511627776;
parameter    ap_ST_fsm_state53 = 66'd2199023255552;
parameter    ap_ST_fsm_state54 = 66'd4398046511104;
parameter    ap_ST_fsm_state55 = 66'd8796093022208;
parameter    ap_ST_fsm_state56 = 66'd17592186044416;
parameter    ap_ST_fsm_state57 = 66'd35184372088832;
parameter    ap_ST_fsm_state58 = 66'd70368744177664;
parameter    ap_ST_fsm_pp2_stage0 = 66'd140737488355328;
parameter    ap_ST_fsm_pp2_stage1 = 66'd281474976710656;
parameter    ap_ST_fsm_pp2_stage2 = 66'd562949953421312;
parameter    ap_ST_fsm_pp2_stage3 = 66'd1125899906842624;
parameter    ap_ST_fsm_pp2_stage4 = 66'd2251799813685248;
parameter    ap_ST_fsm_pp2_stage5 = 66'd4503599627370496;
parameter    ap_ST_fsm_pp2_stage6 = 66'd9007199254740992;
parameter    ap_ST_fsm_state76 = 66'd18014398509481984;
parameter    ap_ST_fsm_state77 = 66'd36028797018963968;
parameter    ap_ST_fsm_state78 = 66'd72057594037927936;
parameter    ap_ST_fsm_state79 = 66'd144115188075855872;
parameter    ap_ST_fsm_state80 = 66'd288230376151711744;
parameter    ap_ST_fsm_state81 = 66'd576460752303423488;
parameter    ap_ST_fsm_state82 = 66'd1152921504606846976;
parameter    ap_ST_fsm_state83 = 66'd2305843009213693952;
parameter    ap_ST_fsm_state84 = 66'd4611686018427387904;
parameter    ap_ST_fsm_state85 = 66'd9223372036854775808;
parameter    ap_ST_fsm_state86 = 66'd18446744073709551616;
parameter    ap_ST_fsm_state87 = 66'd36893488147419103232;
parameter    C_M_AXI_GMEM_0_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_0_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_0_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_0_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_0_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_0_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_0_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_0_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_1_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_1_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_1_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_1_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_1_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_1_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_1_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_1_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_1_CACHE_VALUE = 3;

parameter C_M_AXI_GMEM_0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_1_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [C_M_AXI_GMEM_0_ADDR_WIDTH - 1:0] m_axi_gmem_0_AWADDR;
output  [C_M_AXI_GMEM_0_ID_WIDTH - 1:0] m_axi_gmem_0_AWID;
output  [7:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [C_M_AXI_GMEM_0_AWUSER_WIDTH - 1:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [C_M_AXI_GMEM_0_DATA_WIDTH - 1:0] m_axi_gmem_0_WDATA;
output  [C_M_AXI_GMEM_0_WSTRB_WIDTH - 1:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [C_M_AXI_GMEM_0_ID_WIDTH - 1:0] m_axi_gmem_0_WID;
output  [C_M_AXI_GMEM_0_WUSER_WIDTH - 1:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [C_M_AXI_GMEM_0_ADDR_WIDTH - 1:0] m_axi_gmem_0_ARADDR;
output  [C_M_AXI_GMEM_0_ID_WIDTH - 1:0] m_axi_gmem_0_ARID;
output  [7:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [C_M_AXI_GMEM_0_ARUSER_WIDTH - 1:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [C_M_AXI_GMEM_0_DATA_WIDTH - 1:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [C_M_AXI_GMEM_0_ID_WIDTH - 1:0] m_axi_gmem_0_RID;
input  [C_M_AXI_GMEM_0_RUSER_WIDTH - 1:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [C_M_AXI_GMEM_0_ID_WIDTH - 1:0] m_axi_gmem_0_BID;
input  [C_M_AXI_GMEM_0_BUSER_WIDTH - 1:0] m_axi_gmem_0_BUSER;
output   m_axi_gmem_1_AWVALID;
input   m_axi_gmem_1_AWREADY;
output  [C_M_AXI_GMEM_1_ADDR_WIDTH - 1:0] m_axi_gmem_1_AWADDR;
output  [C_M_AXI_GMEM_1_ID_WIDTH - 1:0] m_axi_gmem_1_AWID;
output  [7:0] m_axi_gmem_1_AWLEN;
output  [2:0] m_axi_gmem_1_AWSIZE;
output  [1:0] m_axi_gmem_1_AWBURST;
output  [1:0] m_axi_gmem_1_AWLOCK;
output  [3:0] m_axi_gmem_1_AWCACHE;
output  [2:0] m_axi_gmem_1_AWPROT;
output  [3:0] m_axi_gmem_1_AWQOS;
output  [3:0] m_axi_gmem_1_AWREGION;
output  [C_M_AXI_GMEM_1_AWUSER_WIDTH - 1:0] m_axi_gmem_1_AWUSER;
output   m_axi_gmem_1_WVALID;
input   m_axi_gmem_1_WREADY;
output  [C_M_AXI_GMEM_1_DATA_WIDTH - 1:0] m_axi_gmem_1_WDATA;
output  [C_M_AXI_GMEM_1_WSTRB_WIDTH - 1:0] m_axi_gmem_1_WSTRB;
output   m_axi_gmem_1_WLAST;
output  [C_M_AXI_GMEM_1_ID_WIDTH - 1:0] m_axi_gmem_1_WID;
output  [C_M_AXI_GMEM_1_WUSER_WIDTH - 1:0] m_axi_gmem_1_WUSER;
output   m_axi_gmem_1_ARVALID;
input   m_axi_gmem_1_ARREADY;
output  [C_M_AXI_GMEM_1_ADDR_WIDTH - 1:0] m_axi_gmem_1_ARADDR;
output  [C_M_AXI_GMEM_1_ID_WIDTH - 1:0] m_axi_gmem_1_ARID;
output  [7:0] m_axi_gmem_1_ARLEN;
output  [2:0] m_axi_gmem_1_ARSIZE;
output  [1:0] m_axi_gmem_1_ARBURST;
output  [1:0] m_axi_gmem_1_ARLOCK;
output  [3:0] m_axi_gmem_1_ARCACHE;
output  [2:0] m_axi_gmem_1_ARPROT;
output  [3:0] m_axi_gmem_1_ARQOS;
output  [3:0] m_axi_gmem_1_ARREGION;
output  [C_M_AXI_GMEM_1_ARUSER_WIDTH - 1:0] m_axi_gmem_1_ARUSER;
input   m_axi_gmem_1_RVALID;
output   m_axi_gmem_1_RREADY;
input  [C_M_AXI_GMEM_1_DATA_WIDTH - 1:0] m_axi_gmem_1_RDATA;
input   m_axi_gmem_1_RLAST;
input  [C_M_AXI_GMEM_1_ID_WIDTH - 1:0] m_axi_gmem_1_RID;
input  [C_M_AXI_GMEM_1_RUSER_WIDTH - 1:0] m_axi_gmem_1_RUSER;
input  [1:0] m_axi_gmem_1_RRESP;
input   m_axi_gmem_1_BVALID;
output   m_axi_gmem_1_BREADY;
input  [1:0] m_axi_gmem_1_BRESP;
input  [C_M_AXI_GMEM_1_ID_WIDTH - 1:0] m_axi_gmem_1_BID;
input  [C_M_AXI_GMEM_1_BUSER_WIDTH - 1:0] m_axi_gmem_1_BUSER;
input  [63:0] values;
input  [63:0] col_indices;
input  [63:0] row_indices;
input  [63:0] x;
input  [63:0] y;
input  [31:0] n;
input  [31:0] m;
input  [31:0] nnz;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [65:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_0_blk_n_AR;
wire    ap_CS_fsm_state2;
reg   [0:0] icmp_ln26_reg_1241;
reg    gmem_0_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln26_1_reg_1288;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln35_1_reg_1328;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage1;
reg   [0:0] icmp_ln53_1_reg_1483;
reg    gmem_0_blk_n_AW;
wire    ap_CS_fsm_pp2_stage3;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage3;
reg   [0:0] icmp_ln53_1_reg_1483_pp2_iter1_reg;
reg   [0:0] icmp_ln59_reg_1521;
reg    gmem_0_blk_n_W;
wire    ap_CS_fsm_pp2_stage4;
wire    ap_block_pp2_stage4;
reg    gmem_0_blk_n_B;
wire    ap_CS_fsm_pp2_stage2;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp2_stage2;
reg   [0:0] icmp_ln53_1_reg_1483_pp2_iter2_reg;
reg   [0:0] icmp_ln59_reg_1521_pp2_iter1_reg;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state87;
reg   [0:0] icmp_ln72_reg_1587;
reg    gmem_1_blk_n_AR;
reg    gmem_1_blk_n_R;
reg    gmem_0_AWVALID;
wire    gmem_0_AWREADY;
reg   [63:0] gmem_0_AWADDR;
reg    gmem_0_WVALID;
wire    gmem_0_WREADY;
reg   [31:0] gmem_0_WDATA;
reg    gmem_0_ARVALID;
wire    gmem_0_ARREADY;
reg   [63:0] gmem_0_ARADDR;
reg   [31:0] gmem_0_ARLEN;
wire    gmem_0_RVALID;
reg    gmem_0_RREADY;
wire   [31:0] gmem_0_RDATA;
wire    gmem_0_RLAST;
wire   [0:0] gmem_0_RID;
wire   [0:0] gmem_0_RUSER;
wire   [1:0] gmem_0_RRESP;
wire    gmem_0_BVALID;
reg    gmem_0_BREADY;
wire   [1:0] gmem_0_BRESP;
wire   [0:0] gmem_0_BID;
wire   [0:0] gmem_0_BUSER;
wire    gmem_1_AWREADY;
wire    gmem_1_WREADY;
reg    gmem_1_ARVALID;
wire    gmem_1_ARREADY;
reg   [63:0] gmem_1_ARADDR;
reg   [31:0] gmem_1_ARLEN;
wire    gmem_1_RVALID;
reg    gmem_1_RREADY;
wire   [31:0] gmem_1_RDATA;
wire    gmem_1_RLAST;
wire   [0:0] gmem_1_RID;
wire   [0:0] gmem_1_RUSER;
wire   [1:0] gmem_1_RRESP;
wire    gmem_1_BVALID;
wire   [1:0] gmem_1_BRESP;
wire   [0:0] gmem_1_BID;
wire   [0:0] gmem_1_BUSER;
reg   [15:0] i_reg_385;
reg   [15:0] i_reg_385_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] i_1_reg_397;
reg   [31:0] previous_row_index_1_reg_408;
reg   [30:0] i_2_reg_418;
reg   [31:0] remained_row_index_prev_1_reg_430;
reg   [31:0] y_all_row_prev_2_reg_440;
wire   [31:0] x_local_q0;
reg   [31:0] reg_519;
wire    ap_CS_fsm_state46;
wire    ap_block_state62_pp2_stage3_iter0;
wire    ap_block_state69_pp2_stage3_iter1;
reg    ap_predicate_op349_writereq_state69;
reg    ap_block_state69_io;
reg    ap_block_pp2_stage3_11001;
wire   [31:0] grp_fu_504_p2;
reg   [31:0] reg_524;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state81;
wire   [0:0] icmp_ln26_fu_528_p2;
reg    ap_block_state2_io;
wire   [0:0] icmp_ln26_1_fu_559_p2;
reg   [0:0] icmp_ln26_1_reg_1288_pp0_iter1_reg;
wire   [15:0] add_ln26_fu_564_p2;
reg   [15:0] add_ln26_reg_1292;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] gmem_0_addr_read_reg_1297;
reg   [31:0] previous_row_index_reg_1308;
wire   [31:0] add_fu_599_p2;
reg   [31:0] add_reg_1313;
wire   [0:0] icmp_ln35_fu_614_p2;
reg   [63:0] gmem_0_addr_2_reg_1322;
wire   [0:0] icmp_ln35_1_fu_645_p2;
wire    ap_block_state27_pp1_stage0_iter0;
reg    ap_block_state28_pp1_stage0_iter1;
wire    ap_block_state29_pp1_stage0_iter2;
wire    ap_block_state30_pp1_stage0_iter3;
wire    ap_block_state31_pp1_stage0_iter4;
wire    ap_block_state32_pp1_stage0_iter5;
wire    ap_block_state33_pp1_stage0_iter6;
wire    ap_block_state34_pp1_stage0_iter7;
wire    ap_block_state35_pp1_stage0_iter8;
wire    ap_block_state36_pp1_stage0_iter9;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln35_1_reg_1328_pp1_iter1_reg;
reg   [0:0] icmp_ln35_1_reg_1328_pp1_iter2_reg;
reg   [0:0] icmp_ln35_1_reg_1328_pp1_iter3_reg;
reg   [0:0] icmp_ln35_1_reg_1328_pp1_iter4_reg;
reg   [0:0] icmp_ln35_1_reg_1328_pp1_iter5_reg;
reg   [0:0] icmp_ln35_1_reg_1328_pp1_iter6_reg;
reg   [0:0] icmp_ln35_1_reg_1328_pp1_iter7_reg;
reg   [0:0] icmp_ln35_1_reg_1328_pp1_iter8_reg;
wire   [15:0] empty_17_fu_650_p1;
reg   [15:0] empty_17_reg_1332;
reg   [15:0] empty_17_reg_1332_pp1_iter1_reg;
reg   [15:0] empty_17_reg_1332_pp1_iter2_reg;
reg   [15:0] empty_17_reg_1332_pp1_iter3_reg;
reg   [15:0] empty_17_reg_1332_pp1_iter4_reg;
reg   [15:0] empty_17_reg_1332_pp1_iter5_reg;
reg   [15:0] empty_17_reg_1332_pp1_iter6_reg;
reg   [15:0] empty_17_reg_1332_pp1_iter7_reg;
reg   [15:0] empty_17_reg_1332_pp1_iter8_reg;
wire   [31:0] add_ln35_1_fu_654_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] row_index_reg_1342;
reg   [31:0] row_index_reg_1342_pp1_iter2_reg;
wire   [31:0] sub_ln39_fu_660_p2;
reg   [31:0] sub_ln39_reg_1348;
wire   [31:0] grp_fu_516_p1;
reg   [31:0] conv_reg_1353;
reg    ap_block_state37_io;
wire    ap_CS_fsm_state42;
wire   [31:0] row_indices_diff_local_q0;
reg   [31:0] row_indices_diff_local_load_reg_1375;
wire    ap_CS_fsm_state43;
reg   [31:0] gmem_0_addr_3_read_reg_1380;
reg    ap_block_state44;
reg   [31:0] gmem_1_addr_read_reg_1385;
wire    ap_CS_fsm_state45;
wire   [31:0] bitcast_ln47_fu_719_p1;
wire    ap_CS_fsm_state47;
reg   [0:0] p_Result_s_reg_1400;
wire    ap_CS_fsm_state49;
wire   [22:0] p_Repl2_s_fu_745_p1;
reg   [22:0] p_Repl2_s_reg_1405;
wire   [0:0] isNeg_fu_759_p3;
reg   [0:0] isNeg_reg_1410;
wire   [8:0] ush_fu_777_p3;
reg   [8:0] ush_reg_1415;
wire   [31:0] grp_fu_512_p2;
reg   [31:0] y_all_row_prev_1_reg_1420;
wire    ap_CS_fsm_state50;
wire   [31:0] val_V_fu_839_p3;
reg   [31:0] val_V_reg_1426;
wire   [31:0] p_Val2_6_fu_851_p3;
reg   [31:0] p_Val2_6_reg_1432;
wire    ap_CS_fsm_state51;
wire   [30:0] trunc_ln53_fu_872_p1;
reg   [30:0] trunc_ln53_reg_1455;
wire   [0:0] icmp_ln53_fu_866_p2;
wire   [31:0] add_ln53_fu_875_p2;
reg   [31:0] add_ln53_reg_1461;
reg   [63:0] gmem_1_addr_1_reg_1466;
reg   [63:0] gmem_0_addr_4_reg_1472;
wire   [31:0] zext_ln53_fu_940_p1;
reg    ap_block_state52_io;
wire   [0:0] icmp_ln53_1_fu_944_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state59_pp2_stage0_iter0;
wire    ap_block_state66_pp2_stage0_iter1;
wire    ap_block_state73_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [31:0] gmem_0_addr_4_read_reg_1487;
reg    ap_block_state60_pp2_stage1_iter0;
wire    ap_block_state67_pp2_stage1_iter1;
wire    ap_block_state74_pp2_stage1_iter2;
reg    ap_block_pp2_stage1_11001;
reg   [31:0] gmem_1_addr_1_read_reg_1492;
wire    ap_block_state61_pp2_stage2_iter0;
wire    ap_block_state68_pp2_stage2_iter1;
reg    ap_predicate_op367_writeresp_state75;
reg    ap_block_state75_pp2_stage2_iter2;
reg    ap_block_pp2_stage2_11001;
reg   [31:0] y_previous_break_1_reg_1502;
wire    ap_block_state63_pp2_stage4_iter0;
wire    ap_block_state70_pp2_stage4_iter1;
reg    ap_predicate_op355_write_state70;
reg    ap_block_state70_io;
reg    ap_block_pp2_stage4_11001;
reg   [31:0] j_1_reg_1508;
wire   [31:0] bitcast_ln57_fu_959_p1;
wire   [0:0] icmp_ln59_fu_963_p2;
wire    ap_CS_fsm_pp2_stage5;
wire    ap_block_state64_pp2_stage5_iter0;
wire    ap_block_state71_pp2_stage5_iter1;
wire    ap_block_pp2_stage5_11001;
wire   [30:0] add_ln53_3_fu_984_p2;
reg   [30:0] add_ln53_3_reg_1525;
wire    ap_CS_fsm_pp2_stage6;
wire    ap_block_state65_pp2_stage6_iter0;
wire    ap_block_state72_pp2_stage6_iter1;
wire    ap_block_pp2_stage6_11001;
reg   [31:0] mul_reg_1530;
reg   [63:0] gmem_0_addr_5_reg_1535;
reg   [0:0] p_Result_5_reg_1546;
wire   [22:0] p_Repl2_3_fu_1058_p1;
reg   [22:0] p_Repl2_3_reg_1551;
wire   [0:0] isNeg_1_fu_1072_p3;
reg   [0:0] isNeg_1_reg_1556;
wire   [8:0] ush_1_fu_1090_p3;
reg   [8:0] ush_1_reg_1561;
wire   [31:0] val_V_1_fu_1152_p3;
reg   [31:0] val_V_1_reg_1566;
wire   [31:0] p_Val2_7_fu_1164_p3;
wire   [31:0] remained_row_index_fu_1175_p2;
reg   [31:0] remained_row_index_reg_1577;
reg   [31:0] y_all_row_reg_1582;
wire   [0:0] icmp_ln72_fu_1181_p2;
wire    ap_CS_fsm_state77;
reg   [63:0] gmem_0_addr_6_reg_1591;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state26;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state27;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
wire    ap_CS_fsm_state58;
reg    ap_block_pp2_stage4_subdone;
reg    ap_condition_pp2_exit_iter0_state63;
wire    ap_block_pp2_stage6_subdone;
reg    ap_block_pp2_stage2_subdone;
reg   [15:0] x_local_address0;
reg    x_local_ce0;
reg    x_local_we0;
wire   [31:0] x_local_d0;
reg   [15:0] row_indices_diff_local_address0;
reg    row_indices_diff_local_ce0;
reg    row_indices_diff_local_we0;
reg   [15:0] ap_phi_mux_i_phi_fu_389_p4;
reg   [31:0] ap_phi_mux_previous_row_index_1_phi_fu_411_p4;
reg   [30:0] ap_phi_mux_i_2_phi_fu_422_p4;
wire    ap_block_pp2_stage0;
reg   [31:0] ap_phi_mux_remained_row_index_prev_1_phi_fu_433_p4;
wire    ap_block_pp2_stage5;
reg   [31:0] ap_phi_mux_y_all_row_prev_2_phi_fu_443_p4;
wire    ap_block_pp2_stage6;
reg   [31:0] ap_phi_reg_pp2_iter0_remained_row_index_1_reg_450;
reg   [31:0] ap_phi_reg_pp2_iter1_remained_row_index_1_reg_450;
reg   [31:0] y_previous_break_0_lcssa_reg_460;
wire    ap_CS_fsm_state76;
reg   [31:0] j_0_lcssa_reg_472;
reg   [31:0] y_all_row_prev_0_lcssa_reg_483;
reg   [31:0] remained_row_index_prev_0_lcssa_reg_494;
wire   [63:0] i_cast1_fu_570_p1;
wire   [63:0] zext_ln39_fu_670_p1;
wire   [63:0] zext_ln47_fu_715_p1;
wire   [63:0] zext_ln57_fu_949_p1;
wire   [63:0] zext_ln63_fu_1032_p1;
wire  signed [63:0] sext_ln26_fu_544_p1;
wire  signed [63:0] sext_ln33_fu_588_p1;
wire  signed [63:0] sext_ln35_fu_635_p1;
wire  signed [63:0] sext_ln47_fu_684_p1;
wire  signed [63:0] sext_ln47_1_fu_704_p1;
wire  signed [63:0] sext_ln53_fu_910_p1;
wire  signed [63:0] sext_ln57_fu_920_p1;
wire  signed [63:0] sext_ln61_fu_1022_p1;
wire  signed [63:0] sext_ln74_fu_1220_p1;
wire   [31:0] bitcast_ln61_fu_1170_p1;
wire    ap_block_pp2_stage4_01001;
reg    ap_block_state87;
wire   [31:0] bitcast_ln74_fu_1230_p1;
reg   [31:0] y_previous_break_fu_164;
reg   [31:0] j_fu_168;
wire   [31:0] j_2_fu_969_p2;
reg   [31:0] grp_fu_504_p0;
reg   [31:0] grp_fu_504_p1;
reg   [31:0] grp_fu_512_p0;
wire   [61:0] trunc_ln_fu_534_p4;
wire   [31:0] i_cast_fu_555_p1;
wire   [61:0] trunc_ln1_fu_579_p4;
wire   [30:0] tmp_fu_604_p4;
wire   [63:0] add_ln35_fu_620_p2;
wire   [61:0] trunc_ln2_fu_625_p4;
wire   [15:0] add_ln39_fu_665_p2;
wire   [61:0] trunc_ln3_fu_675_p4;
wire   [61:0] trunc_ln47_1_fu_695_p4;
wire   [31:0] p_Val2_s_fu_723_p1;
wire   [7:0] p_Repl2_4_fu_735_p4;
wire   [8:0] zext_ln340_fu_749_p1;
wire   [8:0] add_ln340_fu_753_p2;
wire   [7:0] sub_ln1311_fu_767_p2;
wire  signed [8:0] sext_ln1311_fu_773_p1;
wire   [24:0] mantissa_V_fu_785_p4;
wire  signed [31:0] sh_prom_i_i_i_cast_cast_cast_fu_798_p1;
wire   [78:0] zext_ln15_fu_794_p1;
wire   [78:0] sh_prom_i_i_i_cast_cast_cast_cast_fu_801_p1;
wire   [78:0] r_V_fu_805_p2;
wire   [0:0] tmp_5_fu_817_p3;
wire   [78:0] r_V_1_fu_811_p2;
wire   [31:0] zext_ln662_fu_825_p1;
wire   [31:0] tmp_1_fu_829_p4;
wire   [31:0] result_V_1_fu_846_p2;
wire   [30:0] tmp_6_fu_857_p4;
wire   [63:0] add_ln53_1_fu_880_p2;
wire   [63:0] add_ln53_2_fu_895_p2;
wire   [61:0] trunc_ln53_1_fu_900_p4;
wire   [61:0] trunc_ln4_fu_885_p4;
wire   [31:0] add_ln61_fu_990_p2;
wire   [33:0] shl_ln_fu_995_p3;
wire   [63:0] zext_ln61_fu_1003_p1;
wire   [63:0] add_ln61_1_fu_1007_p2;
wire   [61:0] trunc_ln5_fu_1012_p4;
wire   [31:0] p_Val2_3_fu_1036_p1;
wire   [7:0] p_Repl2_5_fu_1048_p4;
wire   [8:0] zext_ln340_1_fu_1062_p1;
wire   [8:0] add_ln340_1_fu_1066_p2;
wire   [7:0] sub_ln1311_1_fu_1080_p2;
wire  signed [8:0] sext_ln1311_1_fu_1086_p1;
wire   [24:0] mantissa_V_1_fu_1098_p4;
wire  signed [31:0] sh_prom_i_i_i14_cast_cast_cast_fu_1111_p1;
wire   [78:0] zext_ln15_1_fu_1107_p1;
wire   [78:0] sh_prom_i_i_i14_cast_cast_cast_cast_fu_1114_p1;
wire   [78:0] r_V_2_fu_1118_p2;
wire   [0:0] tmp_9_fu_1130_p3;
wire   [78:0] r_V_3_fu_1124_p2;
wire   [31:0] zext_ln662_1_fu_1138_p1;
wire   [31:0] tmp_3_fu_1142_p4;
wire   [31:0] result_V_3_fu_1159_p2;
wire   [31:0] add_ln74_fu_1187_p2;
wire   [33:0] shl_ln1_fu_1193_p3;
wire   [63:0] zext_ln74_fu_1201_p1;
wire   [63:0] add_ln74_1_fu_1205_p2;
wire   [61:0] trunc_ln6_fu_1210_p4;
reg   [1:0] grp_fu_504_opcode;
reg    ap_block_pp2_stage1_00001;
wire    ap_block_pp2_stage6_00001;
reg    grp_fu_504_ce;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
reg    grp_fu_512_ce;
reg    grp_fu_516_ce;
reg   [65:0] ap_NS_fsm;
wire    ap_block_pp2_stage0_subdone;
reg    ap_block_pp2_stage1_subdone;
reg    ap_block_pp2_stage3_subdone;
wire    ap_block_pp2_stage5_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 66'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
end

spmv_kernel_gmem_0_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_0_CACHE_VALUE ))
gmem_0_m_axi_U(
    .AWVALID(m_axi_gmem_0_AWVALID),
    .AWREADY(m_axi_gmem_0_AWREADY),
    .AWADDR(m_axi_gmem_0_AWADDR),
    .AWID(m_axi_gmem_0_AWID),
    .AWLEN(m_axi_gmem_0_AWLEN),
    .AWSIZE(m_axi_gmem_0_AWSIZE),
    .AWBURST(m_axi_gmem_0_AWBURST),
    .AWLOCK(m_axi_gmem_0_AWLOCK),
    .AWCACHE(m_axi_gmem_0_AWCACHE),
    .AWPROT(m_axi_gmem_0_AWPROT),
    .AWQOS(m_axi_gmem_0_AWQOS),
    .AWREGION(m_axi_gmem_0_AWREGION),
    .AWUSER(m_axi_gmem_0_AWUSER),
    .WVALID(m_axi_gmem_0_WVALID),
    .WREADY(m_axi_gmem_0_WREADY),
    .WDATA(m_axi_gmem_0_WDATA),
    .WSTRB(m_axi_gmem_0_WSTRB),
    .WLAST(m_axi_gmem_0_WLAST),
    .WID(m_axi_gmem_0_WID),
    .WUSER(m_axi_gmem_0_WUSER),
    .ARVALID(m_axi_gmem_0_ARVALID),
    .ARREADY(m_axi_gmem_0_ARREADY),
    .ARADDR(m_axi_gmem_0_ARADDR),
    .ARID(m_axi_gmem_0_ARID),
    .ARLEN(m_axi_gmem_0_ARLEN),
    .ARSIZE(m_axi_gmem_0_ARSIZE),
    .ARBURST(m_axi_gmem_0_ARBURST),
    .ARLOCK(m_axi_gmem_0_ARLOCK),
    .ARCACHE(m_axi_gmem_0_ARCACHE),
    .ARPROT(m_axi_gmem_0_ARPROT),
    .ARQOS(m_axi_gmem_0_ARQOS),
    .ARREGION(m_axi_gmem_0_ARREGION),
    .ARUSER(m_axi_gmem_0_ARUSER),
    .RVALID(m_axi_gmem_0_RVALID),
    .RREADY(m_axi_gmem_0_RREADY),
    .RDATA(m_axi_gmem_0_RDATA),
    .RLAST(m_axi_gmem_0_RLAST),
    .RID(m_axi_gmem_0_RID),
    .RUSER(m_axi_gmem_0_RUSER),
    .RRESP(m_axi_gmem_0_RRESP),
    .BVALID(m_axi_gmem_0_BVALID),
    .BREADY(m_axi_gmem_0_BREADY),
    .BRESP(m_axi_gmem_0_BRESP),
    .BID(m_axi_gmem_0_BID),
    .BUSER(m_axi_gmem_0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_0_ARVALID),
    .I_ARREADY(gmem_0_ARREADY),
    .I_ARADDR(gmem_0_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_0_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_0_RVALID),
    .I_RREADY(gmem_0_RREADY),
    .I_RDATA(gmem_0_RDATA),
    .I_RID(gmem_0_RID),
    .I_RUSER(gmem_0_RUSER),
    .I_RRESP(gmem_0_RRESP),
    .I_RLAST(gmem_0_RLAST),
    .I_AWVALID(gmem_0_AWVALID),
    .I_AWREADY(gmem_0_AWREADY),
    .I_AWADDR(gmem_0_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_0_WVALID),
    .I_WREADY(gmem_0_WREADY),
    .I_WDATA(gmem_0_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_0_BVALID),
    .I_BREADY(gmem_0_BREADY),
    .I_BRESP(gmem_0_BRESP),
    .I_BID(gmem_0_BID),
    .I_BUSER(gmem_0_BUSER)
);

spmv_kernel_gmem_1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_1_CACHE_VALUE ))
gmem_1_m_axi_U(
    .AWVALID(m_axi_gmem_1_AWVALID),
    .AWREADY(m_axi_gmem_1_AWREADY),
    .AWADDR(m_axi_gmem_1_AWADDR),
    .AWID(m_axi_gmem_1_AWID),
    .AWLEN(m_axi_gmem_1_AWLEN),
    .AWSIZE(m_axi_gmem_1_AWSIZE),
    .AWBURST(m_axi_gmem_1_AWBURST),
    .AWLOCK(m_axi_gmem_1_AWLOCK),
    .AWCACHE(m_axi_gmem_1_AWCACHE),
    .AWPROT(m_axi_gmem_1_AWPROT),
    .AWQOS(m_axi_gmem_1_AWQOS),
    .AWREGION(m_axi_gmem_1_AWREGION),
    .AWUSER(m_axi_gmem_1_AWUSER),
    .WVALID(m_axi_gmem_1_WVALID),
    .WREADY(m_axi_gmem_1_WREADY),
    .WDATA(m_axi_gmem_1_WDATA),
    .WSTRB(m_axi_gmem_1_WSTRB),
    .WLAST(m_axi_gmem_1_WLAST),
    .WID(m_axi_gmem_1_WID),
    .WUSER(m_axi_gmem_1_WUSER),
    .ARVALID(m_axi_gmem_1_ARVALID),
    .ARREADY(m_axi_gmem_1_ARREADY),
    .ARADDR(m_axi_gmem_1_ARADDR),
    .ARID(m_axi_gmem_1_ARID),
    .ARLEN(m_axi_gmem_1_ARLEN),
    .ARSIZE(m_axi_gmem_1_ARSIZE),
    .ARBURST(m_axi_gmem_1_ARBURST),
    .ARLOCK(m_axi_gmem_1_ARLOCK),
    .ARCACHE(m_axi_gmem_1_ARCACHE),
    .ARPROT(m_axi_gmem_1_ARPROT),
    .ARQOS(m_axi_gmem_1_ARQOS),
    .ARREGION(m_axi_gmem_1_ARREGION),
    .ARUSER(m_axi_gmem_1_ARUSER),
    .RVALID(m_axi_gmem_1_RVALID),
    .RREADY(m_axi_gmem_1_RREADY),
    .RDATA(m_axi_gmem_1_RDATA),
    .RLAST(m_axi_gmem_1_RLAST),
    .RID(m_axi_gmem_1_RID),
    .RUSER(m_axi_gmem_1_RUSER),
    .RRESP(m_axi_gmem_1_RRESP),
    .BVALID(m_axi_gmem_1_BVALID),
    .BREADY(m_axi_gmem_1_BREADY),
    .BRESP(m_axi_gmem_1_BRESP),
    .BID(m_axi_gmem_1_BID),
    .BUSER(m_axi_gmem_1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_1_ARVALID),
    .I_ARREADY(gmem_1_ARREADY),
    .I_ARADDR(gmem_1_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_1_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_1_RVALID),
    .I_RREADY(gmem_1_RREADY),
    .I_RDATA(gmem_1_RDATA),
    .I_RID(gmem_1_RID),
    .I_RUSER(gmem_1_RUSER),
    .I_RRESP(gmem_1_RRESP),
    .I_RLAST(gmem_1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_1_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem_1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem_1_BRESP),
    .I_BID(gmem_1_BID),
    .I_BUSER(gmem_1_BUSER)
);

spmv_kernel_x_local #(
    .DataWidth( 32 ),
    .AddressRange( 60098 ),
    .AddressWidth( 16 ))
x_local_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_local_address0),
    .ce0(x_local_ce0),
    .we0(x_local_we0),
    .d0(x_local_d0),
    .q0(x_local_q0)
);

spmv_kernel_x_local #(
    .DataWidth( 32 ),
    .AddressRange( 60098 ),
    .AddressWidth( 16 ))
row_indices_diff_local_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(row_indices_diff_local_address0),
    .ce0(row_indices_diff_local_ce0),
    .we0(row_indices_diff_local_we0),
    .d0(conv_reg_1353),
    .q0(row_indices_diff_local_q0)
);

spmv_kernel_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_504_p0),
    .din1(grp_fu_504_p1),
    .opcode(grp_fu_504_opcode),
    .ce(grp_fu_504_ce),
    .dout(grp_fu_504_p2)
);

spmv_kernel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_512_p0),
    .din1(reg_519),
    .ce(grp_fu_512_ce),
    .dout(grp_fu_512_p2)
);

spmv_kernel_sitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_6_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sub_ln39_reg_1348),
    .ce(grp_fu_516_ce),
    .dout(grp_fu_516_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state27) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state27)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state27);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp1_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4) & (1'b1 == ap_condition_pp2_exit_iter0_state63))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state58)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage6_subdone) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((1'b0 == ap_block_pp2_stage6_subdone) & (1'b1 == ap_CS_fsm_pp2_stage6)))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state58)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_reg_1521 == 1'd1) & (icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        ap_phi_reg_pp2_iter1_remained_row_index_1_reg_450 <= p_Val2_7_fu_1164_p3;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage6_11001) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
        ap_phi_reg_pp2_iter1_remained_row_index_1_reg_450 <= ap_phi_reg_pp2_iter0_remained_row_index_1_reg_450;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_1_reg_397 <= 32'd1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln35_1_fu_645_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_397 <= add_ln35_1_fu_654_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln53_1_reg_1483 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_2_reg_418 <= add_ln53_3_reg_1525;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        i_2_reg_418 <= 31'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_385 <= 16'd0;
    end else if (((icmp_ln26_1_reg_1288 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_385 <= add_ln26_reg_1292;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        j_0_lcssa_reg_472 <= j_1_reg_1508;
    end else if (((icmp_ln53_fu_866_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        j_0_lcssa_reg_472 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_reg_1521 == 1'd1) & (icmp_ln53_1_reg_1483 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage6_11001) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
        j_fu_168 <= j_2_fu_969_p2;
    end else if (((icmp_ln53_fu_866_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        j_fu_168 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        previous_row_index_1_reg_408 <= previous_row_index_reg_1308;
    end else if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln35_1_reg_1328_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        previous_row_index_1_reg_408 <= row_index_reg_1342_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        remained_row_index_prev_0_lcssa_reg_494 <= remained_row_index_prev_1_reg_430;
    end else if (((icmp_ln53_fu_866_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        remained_row_index_prev_0_lcssa_reg_494 <= p_Val2_6_fu_851_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        remained_row_index_prev_1_reg_430 <= remained_row_index_reg_1577;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        remained_row_index_prev_1_reg_430 <= p_Val2_6_reg_1432;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        y_all_row_prev_0_lcssa_reg_483 <= y_all_row_prev_2_reg_440;
    end else if (((icmp_ln53_fu_866_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        y_all_row_prev_0_lcssa_reg_483 <= y_all_row_prev_1_reg_1420;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage6_11001) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
        y_all_row_prev_2_reg_440 <= y_all_row_reg_1582;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        y_all_row_prev_2_reg_440 <= y_all_row_prev_1_reg_1420;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        y_previous_break_0_lcssa_reg_460 <= y_previous_break_1_reg_1502;
    end else if (((icmp_ln53_fu_866_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        y_previous_break_0_lcssa_reg_460 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_reg_1521 == 1'd1) & (icmp_ln53_1_reg_1483 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage6_11001) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
        y_previous_break_fu_164 <= ap_phi_mux_y_all_row_prev_2_phi_fu_443_p4;
    end else if (((icmp_ln53_fu_866_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        y_previous_break_fu_164 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln26_reg_1292 <= add_ln26_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_1_reg_1483 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage6_11001) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
        add_ln53_3_reg_1525 <= add_ln53_3_fu_984_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_866_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        add_ln53_reg_1461 <= add_ln53_fu_875_p2;
        gmem_0_addr_4_reg_1472 <= sext_ln57_fu_920_p1;
        gmem_1_addr_1_reg_1466 <= sext_ln53_fu_910_p1;
        trunc_ln53_reg_1455 <= trunc_ln53_fu_872_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        add_reg_1313 <= add_fu_599_p2;
        previous_row_index_reg_1308 <= gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_963_p2 == 1'd0) & (icmp_ln53_1_reg_1483 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        ap_phi_reg_pp2_iter0_remained_row_index_1_reg_450 <= ap_phi_mux_remained_row_index_prev_1_phi_fu_433_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_1_reg_1328_pp1_iter7_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        conv_reg_1353 <= grp_fu_516_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_1_fu_645_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        empty_17_reg_1332 <= empty_17_fu_650_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        empty_17_reg_1332_pp1_iter1_reg <= empty_17_reg_1332;
        icmp_ln35_1_reg_1328 <= icmp_ln35_1_fu_645_p2;
        icmp_ln35_1_reg_1328_pp1_iter1_reg <= icmp_ln35_1_reg_1328;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        empty_17_reg_1332_pp1_iter2_reg <= empty_17_reg_1332_pp1_iter1_reg;
        empty_17_reg_1332_pp1_iter3_reg <= empty_17_reg_1332_pp1_iter2_reg;
        empty_17_reg_1332_pp1_iter4_reg <= empty_17_reg_1332_pp1_iter3_reg;
        empty_17_reg_1332_pp1_iter5_reg <= empty_17_reg_1332_pp1_iter4_reg;
        empty_17_reg_1332_pp1_iter6_reg <= empty_17_reg_1332_pp1_iter5_reg;
        empty_17_reg_1332_pp1_iter7_reg <= empty_17_reg_1332_pp1_iter6_reg;
        empty_17_reg_1332_pp1_iter8_reg <= empty_17_reg_1332_pp1_iter7_reg;
        icmp_ln35_1_reg_1328_pp1_iter2_reg <= icmp_ln35_1_reg_1328_pp1_iter1_reg;
        icmp_ln35_1_reg_1328_pp1_iter3_reg <= icmp_ln35_1_reg_1328_pp1_iter2_reg;
        icmp_ln35_1_reg_1328_pp1_iter4_reg <= icmp_ln35_1_reg_1328_pp1_iter3_reg;
        icmp_ln35_1_reg_1328_pp1_iter5_reg <= icmp_ln35_1_reg_1328_pp1_iter4_reg;
        icmp_ln35_1_reg_1328_pp1_iter6_reg <= icmp_ln35_1_reg_1328_pp1_iter5_reg;
        icmp_ln35_1_reg_1328_pp1_iter7_reg <= icmp_ln35_1_reg_1328_pp1_iter6_reg;
        icmp_ln35_1_reg_1328_pp1_iter8_reg <= icmp_ln35_1_reg_1328_pp1_iter7_reg;
        row_index_reg_1342_pp1_iter2_reg <= row_index_reg_1342;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_614_p2 == 1'd0) & (gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        gmem_0_addr_2_reg_1322 <= sext_ln35_fu_635_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_1_RVALID == 1'b0) | (gmem_0_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state44))) begin
        gmem_0_addr_3_read_reg_1380 <= gmem_0_RDATA;
        gmem_1_addr_read_reg_1385 <= gmem_1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_1_reg_1483 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        gmem_0_addr_4_read_reg_1487 <= gmem_0_RDATA;
        gmem_1_addr_1_read_reg_1492 <= gmem_1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_reg_1521 == 1'd1) & (icmp_ln53_1_reg_1483 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        gmem_0_addr_5_reg_1535 <= sext_ln61_fu_1022_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_1181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        gmem_0_addr_6_reg_1591 <= sext_ln74_fu_1220_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_1_reg_1288 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_0_addr_read_reg_1297 <= gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_385_pp0_iter1_reg <= i_reg_385;
        icmp_ln26_1_reg_1288 <= icmp_ln26_1_fu_559_p2;
        icmp_ln26_1_reg_1288_pp0_iter1_reg <= icmp_ln26_1_reg_1288;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln26_reg_1241 <= icmp_ln26_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln53_1_reg_1483 <= icmp_ln53_1_fu_944_p2;
        icmp_ln53_1_reg_1483_pp2_iter1_reg <= icmp_ln53_1_reg_1483;
        icmp_ln53_1_reg_1483_pp2_iter2_reg <= icmp_ln53_1_reg_1483_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_1_reg_1483 == 1'd0) & (1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        icmp_ln59_reg_1521 <= icmp_ln59_fu_963_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        icmp_ln59_reg_1521_pp2_iter1_reg <= icmp_ln59_reg_1521;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        icmp_ln72_reg_1587 <= icmp_ln72_fu_1181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_reg_1521 == 1'd1) & (icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        isNeg_1_reg_1556 <= add_ln340_1_fu_1066_p2[32'd8];
        p_Repl2_3_reg_1551 <= p_Repl2_3_fu_1058_p1;
        p_Result_5_reg_1546 <= p_Val2_3_fu_1036_p1[32'd31];
        ush_1_reg_1561 <= ush_1_fu_1090_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        isNeg_reg_1410 <= add_ln340_fu_753_p2[32'd8];
        p_Repl2_s_reg_1405 <= p_Repl2_s_fu_745_p1;
        p_Result_s_reg_1400 <= p_Val2_s_fu_723_p1[32'd31];
        ush_reg_1415 <= ush_fu_777_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        j_1_reg_1508 <= j_fu_168;
        y_previous_break_1_reg_1502 <= y_previous_break_fu_164;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln53_1_reg_1483 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mul_reg_1530 <= grp_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        p_Val2_6_reg_1432 <= p_Val2_6_fu_851_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) | ((icmp_ln53_1_reg_1483 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)))) begin
        reg_519 <= x_local_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state48) | ((icmp_ln59_reg_1521 == 1'd1) & (icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)))) begin
        reg_524 <= grp_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        remained_row_index_reg_1577 <= remained_row_index_fu_1175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_1_reg_1328 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        row_index_reg_1342 <= gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        row_indices_diff_local_load_reg_1375 <= row_indices_diff_local_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_1_reg_1328_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sub_ln39_reg_1348 <= sub_ln39_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_reg_1521 == 1'd1) & (icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        val_V_1_reg_1566 <= val_V_1_fu_1152_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        val_V_reg_1426 <= val_V_fu_839_p3;
        y_all_row_prev_1_reg_1420 <= grp_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        y_all_row_reg_1582 <= grp_fu_504_p2;
    end
end

always @ (*) begin
    if ((icmp_ln26_1_fu_559_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln35_1_fu_645_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state27 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state27 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln53_1_reg_1483 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state63 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state63 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_0_BVALID == 1'b0) & (icmp_ln72_reg_1587 == 1'd1)) & (1'b1 == ap_CS_fsm_state87))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln53_1_reg_1483 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_2_phi_fu_422_p4 = add_ln53_3_reg_1525;
    end else begin
        ap_phi_mux_i_2_phi_fu_422_p4 = i_2_reg_418;
    end
end

always @ (*) begin
    if (((icmp_ln26_1_reg_1288 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_389_p4 = add_ln26_reg_1292;
    end else begin
        ap_phi_mux_i_phi_fu_389_p4 = i_reg_385;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln35_1_reg_1328_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_previous_row_index_1_phi_fu_411_p4 = row_index_reg_1342_pp1_iter2_reg;
    end else begin
        ap_phi_mux_previous_row_index_1_phi_fu_411_p4 = previous_row_index_1_reg_408;
    end
end

always @ (*) begin
    if (((icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage5) & (1'b1 == ap_CS_fsm_pp2_stage5))) begin
        ap_phi_mux_remained_row_index_prev_1_phi_fu_433_p4 = remained_row_index_reg_1577;
    end else begin
        ap_phi_mux_remained_row_index_prev_1_phi_fu_433_p4 = remained_row_index_prev_1_reg_430;
    end
end

always @ (*) begin
    if (((icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage6) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
        ap_phi_mux_y_all_row_prev_2_phi_fu_443_p4 = y_all_row_reg_1582;
    end else begin
        ap_phi_mux_y_all_row_prev_2_phi_fu_443_p4 = y_all_row_prev_2_reg_440;
    end
end

always @ (*) begin
    if ((~((gmem_0_BVALID == 1'b0) & (icmp_ln72_reg_1587 == 1'd1)) & (1'b1 == ap_CS_fsm_state87))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52))) begin
        gmem_0_ARADDR = gmem_0_addr_4_reg_1472;
    end else if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
        gmem_0_ARADDR = sext_ln47_fu_684_p1;
    end else if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        gmem_0_ARADDR = gmem_0_addr_2_reg_1322;
    end else if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_0_ARADDR = sext_ln33_fu_588_p1;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln26_reg_1241 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_0_ARADDR = sext_ln26_fu_544_p1;
    end else begin
        gmem_0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52))) begin
        gmem_0_ARLEN = zext_ln53_fu_940_p1;
    end else if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        gmem_0_ARLEN = n;
    end else if ((((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)) | ((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        gmem_0_ARLEN = 32'd1;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln26_reg_1241 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_0_ARLEN = m;
    end else begin
        gmem_0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52)) | ((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)) | ((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_state2_io) & (icmp_ln26_reg_1241 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_0_ARVALID = 1'b1;
    end else begin
        gmem_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
        gmem_0_AWADDR = gmem_0_addr_6_reg_1591;
    end else if (((ap_predicate_op349_writereq_state69 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        gmem_0_AWADDR = gmem_0_addr_5_reg_1535;
    end else begin
        gmem_0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op349_writereq_state69 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        gmem_0_AWVALID = 1'b1;
    end else begin
        gmem_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op367_writeresp_state75 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | (~((gmem_0_BVALID == 1'b0) & (icmp_ln72_reg_1587 == 1'd1)) & (icmp_ln72_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_state87)))) begin
        gmem_0_BREADY = 1'b1;
    end else begin
        gmem_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((gmem_1_RVALID == 1'b0) | (gmem_0_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state44)) | ((gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((icmp_ln53_1_reg_1483 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((icmp_ln35_1_reg_1328 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln26_1_reg_1288 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_0_RREADY = 1'b1;
    end else begin
        gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        gmem_0_WDATA = bitcast_ln74_fu_1230_p1;
    end else if (((ap_predicate_op355_write_state70 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage4_01001) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        gmem_0_WDATA = bitcast_ln61_fu_1170_p1;
    end else begin
        gmem_0_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op355_write_state70 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((gmem_0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state82)))) begin
        gmem_0_WVALID = 1'b1;
    end else begin
        gmem_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln26_reg_1241 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_0_blk_n_AR = m_axi_gmem_0_ARREADY;
    end else begin
        gmem_0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | ((icmp_ln59_reg_1521 == 1'd1) & (icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3)))) begin
        gmem_0_blk_n_AW = m_axi_gmem_0_AWREADY;
    end else begin
        gmem_0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln72_reg_1587 == 1'd1) & (1'b1 == ap_CS_fsm_state87)) | ((icmp_ln59_reg_1521_pp2_iter1_reg == 1'd1) & (icmp_ln53_1_reg_1483_pp2_iter2_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2)))) begin
        gmem_0_blk_n_B = m_axi_gmem_0_BVALID;
    end else begin
        gmem_0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state19) | ((icmp_ln53_1_reg_1483 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((icmp_ln35_1_reg_1328 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln26_1_reg_1288 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_0_blk_n_R = m_axi_gmem_0_RVALID;
    end else begin
        gmem_0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state82) | ((icmp_ln59_reg_1521 == 1'd1) & (icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage4) & (1'b1 == ap_CS_fsm_pp2_stage4)))) begin
        gmem_0_blk_n_W = m_axi_gmem_0_WREADY;
    end else begin
        gmem_0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52))) begin
        gmem_1_ARADDR = gmem_1_addr_1_reg_1466;
    end else if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
        gmem_1_ARADDR = sext_ln47_1_fu_704_p1;
    end else begin
        gmem_1_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52))) begin
        gmem_1_ARLEN = add_ln53_reg_1461;
    end else if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
        gmem_1_ARLEN = 32'd1;
    end else begin
        gmem_1_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52)) | ((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)))) begin
        gmem_1_ARVALID = 1'b1;
    end else begin
        gmem_1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((gmem_1_RVALID == 1'b0) | (gmem_0_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state44)) | ((icmp_ln53_1_reg_1483 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        gmem_1_RREADY = 1'b1;
    end else begin
        gmem_1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state37))) begin
        gmem_1_blk_n_AR = m_axi_gmem_1_ARREADY;
    end else begin
        gmem_1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | ((icmp_ln53_1_reg_1483 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        gmem_1_blk_n_R = m_axi_gmem_1_RVALID;
    end else begin
        gmem_1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | ((1'b0 == ap_block_pp2_stage6_11001) & (1'b1 == ap_CS_fsm_pp2_stage6)) | ((1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5)) | ((1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | (~((gmem_1_RVALID == 1'b0) | (gmem_0_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state44)) | ((1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        grp_fu_504_ce = 1'b1;
    end else begin
        grp_fu_504_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln72_fu_1181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77)) | ((icmp_ln59_reg_1521 == 1'd1) & (icmp_ln53_1_reg_1483 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage6_00001) & (1'b1 == ap_CS_fsm_pp2_stage6)))) begin
        grp_fu_504_opcode = 2'd1;
    end else if (((~((gmem_1_RVALID == 1'b0) | (gmem_0_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state44)) | ((icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_00001) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        grp_fu_504_opcode = 2'd0;
    end else begin
        grp_fu_504_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        grp_fu_504_p0 = y_all_row_prev_0_lcssa_reg_483;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        grp_fu_504_p0 = y_all_row_prev_2_reg_440;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage6) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
        grp_fu_504_p0 = ap_phi_mux_y_all_row_prev_2_phi_fu_443_p4;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_504_p0 = row_indices_diff_local_load_reg_1375;
    end else begin
        grp_fu_504_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        grp_fu_504_p1 = y_previous_break_0_lcssa_reg_460;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        grp_fu_504_p1 = mul_reg_1530;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage6) & (1'b1 == ap_CS_fsm_pp2_stage6))) begin
        grp_fu_504_p1 = y_previous_break_1_reg_1502;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_504_p1 = 32'd3212836864;
    end else begin
        grp_fu_504_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | ((1'b0 == ap_block_pp2_stage6_11001) & (1'b1 == ap_CS_fsm_pp2_stage6)) | ((1'b0 == ap_block_pp2_stage5_11001) & (1'b1 == ap_CS_fsm_pp2_stage5)) | ((1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        grp_fu_512_ce = 1'b1;
    end else begin
        grp_fu_512_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage4) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
        grp_fu_512_p0 = bitcast_ln57_fu_959_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_512_p0 = bitcast_ln47_fu_719_p1;
    end else begin
        grp_fu_512_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_516_ce = 1'b1;
    end else begin
        grp_fu_516_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        row_indices_diff_local_address0 = zext_ln63_fu_1032_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        row_indices_diff_local_address0 = 64'd0;
    end else if (((ap_enable_reg_pp1_iter9 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        row_indices_diff_local_address0 = zext_ln39_fu_670_p1;
    end else begin
        row_indices_diff_local_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp1_iter9 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        row_indices_diff_local_ce0 = 1'b1;
    end else begin
        row_indices_diff_local_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter9 == 1'b1) & (icmp_ln35_1_reg_1328_pp1_iter8_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        row_indices_diff_local_we0 = 1'b1;
    end else begin
        row_indices_diff_local_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        x_local_address0 = zext_ln57_fu_949_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        x_local_address0 = zext_ln47_fu_715_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        x_local_address0 = i_cast1_fu_570_p1;
    end else begin
        x_local_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        x_local_ce0 = 1'b1;
    end else begin
        x_local_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln26_1_reg_1288_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_local_we0 = 1'b1;
    end else begin
        x_local_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (icmp_ln26_reg_1241 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b0 == ap_block_state2_io) & (icmp_ln26_reg_1241 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_1_fu_559_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_1_fu_559_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln35_fu_614_p2 == 1'd1) & (gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else if (((icmp_ln35_fu_614_p2 == 1'd0) & (gmem_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((gmem_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln35_1_fu_645_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter9 == 1'b1) & (ap_enable_reg_pp1_iter8 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln35_1_fu_645_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter9 == 1'b1) & (ap_enable_reg_pp1_iter8 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if ((~((gmem_1_RVALID == 1'b0) | (gmem_0_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((icmp_ln53_fu_866_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b0 == ap_block_state52_io) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2)) & (1'b0 == ap_block_pp2_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_pp2_stage4 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln53_1_reg_1483 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage4_subdone)) & (1'b0 == ap_block_pp2_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage5;
            end else if (((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln53_1_reg_1483 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end
        end
        ap_ST_fsm_pp2_stage5 : begin
            if ((1'b0 == ap_block_pp2_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage5;
            end
        end
        ap_ST_fsm_pp2_stage6 : begin
            if ((1'b0 == ap_block_pp2_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage6;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((icmp_ln72_fu_1181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((gmem_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            if (((gmem_0_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            if ((~((gmem_0_BVALID == 1'b0) & (icmp_ln72_reg_1587 == 1'd1)) & (1'b1 == ap_CS_fsm_state87))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_fu_599_p2 = (n + 32'd1);

assign add_ln26_fu_564_p2 = (ap_phi_mux_i_phi_fu_389_p4 + 16'd1);

assign add_ln340_1_fu_1066_p2 = ($signed(9'd385) + $signed(zext_ln340_1_fu_1062_p1));

assign add_ln340_fu_753_p2 = ($signed(9'd385) + $signed(zext_ln340_fu_749_p1));

assign add_ln35_1_fu_654_p2 = (32'd1 + i_1_reg_397);

assign add_ln35_fu_620_p2 = (row_indices + 64'd4);

assign add_ln39_fu_665_p2 = ($signed(16'd65535) + $signed(empty_17_reg_1332_pp1_iter8_reg));

assign add_ln53_1_fu_880_p2 = (64'd4 + values);

assign add_ln53_2_fu_895_p2 = (64'd4 + col_indices);

assign add_ln53_3_fu_984_p2 = (i_2_reg_418 + 31'd1);

assign add_ln53_fu_875_p2 = ($signed(32'd4294967295) + $signed(nnz));

assign add_ln61_1_fu_1007_p2 = (y + zext_ln61_fu_1003_p1);

assign add_ln61_fu_990_p2 = ($signed(32'd4294967295) + $signed(j_1_reg_1508));

assign add_ln74_1_fu_1205_p2 = (zext_ln74_fu_1201_p1 + y);

assign add_ln74_fu_1187_p2 = ($signed(j_0_lcssa_reg_472) + $signed(32'd4294967295));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp2_stage3 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_pp2_stage4 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_pp2_stage5 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_pp2_stage6 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd65];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_0_RVALID == 1'b0) & (icmp_ln26_1_reg_1288 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_0_RVALID == 1'b0) & (icmp_ln26_1_reg_1288 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_0_RVALID == 1'b0) & (icmp_ln35_1_reg_1328 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_0_RVALID == 1'b0) & (icmp_ln35_1_reg_1328 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage1_00001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & (((gmem_1_RVALID == 1'b0) & (icmp_ln53_1_reg_1483 == 1'd0)) | ((gmem_0_RVALID == 1'b0) & (icmp_ln53_1_reg_1483 == 1'd0))));
end

always @ (*) begin
    ap_block_pp2_stage1_11001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & (((gmem_1_RVALID == 1'b0) & (icmp_ln53_1_reg_1483 == 1'd0)) | ((gmem_0_RVALID == 1'b0) & (icmp_ln53_1_reg_1483 == 1'd0))));
end

always @ (*) begin
    ap_block_pp2_stage1_subdone = ((ap_enable_reg_pp2_iter0 == 1'b1) & (((gmem_1_RVALID == 1'b0) & (icmp_ln53_1_reg_1483 == 1'd0)) | ((gmem_0_RVALID == 1'b0) & (icmp_ln53_1_reg_1483 == 1'd0))));
end

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage2_11001 = ((ap_predicate_op367_writeresp_state75 == 1'b1) & (gmem_0_BVALID == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage2_subdone = ((ap_predicate_op367_writeresp_state75 == 1'b1) & (gmem_0_BVALID == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

assign ap_block_pp2_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage3_11001 = ((1'b1 == ap_block_state69_io) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage3_subdone = ((1'b1 == ap_block_state69_io) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp2_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage4_11001 = ((1'b1 == ap_block_state70_io) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage4_subdone = ((1'b1 == ap_block_state70_io) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp2_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage6_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage6_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_0_RVALID == 1'b0) & (icmp_ln26_1_reg_1288 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_pp1_stage0_iter1 = ((gmem_0_RVALID == 1'b0) & (icmp_ln35_1_reg_1328 == 1'd0));
end

assign ap_block_state29_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((gmem_0_ARREADY == 1'b0) & (icmp_ln26_reg_1241 == 1'd0));
end

assign ap_block_state30_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state37_io = ((gmem_1_ARREADY == 1'b0) | (gmem_0_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state44 = ((gmem_1_RVALID == 1'b0) | (gmem_0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state52_io = ((gmem_1_ARREADY == 1'b0) | (gmem_0_ARREADY == 1'b0));
end

assign ap_block_state59_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state60_pp2_stage1_iter0 = (((gmem_1_RVALID == 1'b0) & (icmp_ln53_1_reg_1483 == 1'd0)) | ((gmem_0_RVALID == 1'b0) & (icmp_ln53_1_reg_1483 == 1'd0)));
end

assign ap_block_state61_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp2_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp2_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp2_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp2_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state69_io = ((ap_predicate_op349_writereq_state69 == 1'b1) & (gmem_0_AWREADY == 1'b0));
end

assign ap_block_state69_pp2_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state70_io = ((ap_predicate_op355_write_state70 == 1'b1) & (gmem_0_WREADY == 1'b0));
end

assign ap_block_state70_pp2_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp2_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp2_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75_pp2_stage2_iter2 = ((ap_predicate_op367_writeresp_state75 == 1'b1) & (gmem_0_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state87 = ((gmem_0_BVALID == 1'b0) & (icmp_ln72_reg_1587 == 1'd1));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_predicate_op349_writereq_state69 = ((icmp_ln59_reg_1521 == 1'd1) & (icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op355_write_state70 = ((icmp_ln59_reg_1521 == 1'd1) & (icmp_ln53_1_reg_1483_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op367_writeresp_state75 = ((icmp_ln59_reg_1521_pp2_iter1_reg == 1'd1) & (icmp_ln53_1_reg_1483_pp2_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln47_fu_719_p1 = gmem_0_addr_3_read_reg_1380;

assign bitcast_ln57_fu_959_p1 = gmem_0_addr_4_read_reg_1487;

assign bitcast_ln61_fu_1170_p1 = reg_524;

assign bitcast_ln74_fu_1230_p1 = reg_524;

assign empty_17_fu_650_p1 = i_1_reg_397[15:0];

assign i_cast1_fu_570_p1 = i_reg_385_pp0_iter1_reg;

assign i_cast_fu_555_p1 = ap_phi_mux_i_phi_fu_389_p4;

assign icmp_ln26_1_fu_559_p2 = ((i_cast_fu_555_p1 == m) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_528_p2 = ((m == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_645_p2 = ((i_1_reg_397 == add_reg_1313) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_614_p2 = ((tmp_fu_604_p4 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln53_1_fu_944_p2 = ((ap_phi_mux_i_2_phi_fu_422_p4 == trunc_ln53_reg_1455) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_866_p2 = (($signed(tmp_6_fu_857_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_963_p2 = ((ap_phi_mux_remained_row_index_prev_1_phi_fu_433_p4 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_1181_p2 = ((remained_row_index_prev_0_lcssa_reg_494 == 32'd0) ? 1'b1 : 1'b0);

assign isNeg_1_fu_1072_p3 = add_ln340_1_fu_1066_p2[32'd8];

assign isNeg_fu_759_p3 = add_ln340_fu_753_p2[32'd8];

assign j_2_fu_969_p2 = (32'd1 + j_1_reg_1508);

assign mantissa_V_1_fu_1098_p4 = {{{{1'd1}, {p_Repl2_3_reg_1551}}}, {1'd0}};

assign mantissa_V_fu_785_p4 = {{{{1'd1}, {p_Repl2_s_reg_1405}}}, {1'd0}};

assign p_Repl2_3_fu_1058_p1 = p_Val2_3_fu_1036_p1[22:0];

assign p_Repl2_4_fu_735_p4 = {{p_Val2_s_fu_723_p1[30:23]}};

assign p_Repl2_5_fu_1048_p4 = {{p_Val2_3_fu_1036_p1[30:23]}};

assign p_Repl2_s_fu_745_p1 = p_Val2_s_fu_723_p1[22:0];

assign p_Val2_3_fu_1036_p1 = row_indices_diff_local_q0;

assign p_Val2_6_fu_851_p3 = ((p_Result_s_reg_1400[0:0] === 1'b1) ? result_V_1_fu_846_p2 : val_V_reg_1426);

assign p_Val2_7_fu_1164_p3 = ((p_Result_5_reg_1546[0:0] === 1'b1) ? result_V_3_fu_1159_p2 : val_V_1_reg_1566);

assign p_Val2_s_fu_723_p1 = reg_524;

assign r_V_1_fu_811_p2 = zext_ln15_fu_794_p1 << sh_prom_i_i_i_cast_cast_cast_cast_fu_801_p1;

assign r_V_2_fu_1118_p2 = zext_ln15_1_fu_1107_p1 >> sh_prom_i_i_i14_cast_cast_cast_cast_fu_1114_p1;

assign r_V_3_fu_1124_p2 = zext_ln15_1_fu_1107_p1 << sh_prom_i_i_i14_cast_cast_cast_cast_fu_1114_p1;

assign r_V_fu_805_p2 = zext_ln15_fu_794_p1 >> sh_prom_i_i_i_cast_cast_cast_cast_fu_801_p1;

assign remained_row_index_fu_1175_p2 = ($signed(ap_phi_reg_pp2_iter1_remained_row_index_1_reg_450) + $signed(32'd4294967295));

assign result_V_1_fu_846_p2 = (32'd0 - val_V_reg_1426);

assign result_V_3_fu_1159_p2 = (32'd0 - val_V_1_reg_1566);

assign sext_ln1311_1_fu_1086_p1 = $signed(sub_ln1311_1_fu_1080_p2);

assign sext_ln1311_fu_773_p1 = $signed(sub_ln1311_fu_767_p2);

assign sext_ln26_fu_544_p1 = $signed(trunc_ln_fu_534_p4);

assign sext_ln33_fu_588_p1 = $signed(trunc_ln1_fu_579_p4);

assign sext_ln35_fu_635_p1 = $signed(trunc_ln2_fu_625_p4);

assign sext_ln47_1_fu_704_p1 = $signed(trunc_ln47_1_fu_695_p4);

assign sext_ln47_fu_684_p1 = $signed(trunc_ln3_fu_675_p4);

assign sext_ln53_fu_910_p1 = $signed(trunc_ln53_1_fu_900_p4);

assign sext_ln57_fu_920_p1 = $signed(trunc_ln4_fu_885_p4);

assign sext_ln61_fu_1022_p1 = $signed(trunc_ln5_fu_1012_p4);

assign sext_ln74_fu_1220_p1 = $signed(trunc_ln6_fu_1210_p4);

assign sh_prom_i_i_i14_cast_cast_cast_cast_fu_1114_p1 = $unsigned(sh_prom_i_i_i14_cast_cast_cast_fu_1111_p1);

assign sh_prom_i_i_i14_cast_cast_cast_fu_1111_p1 = $signed(ush_1_reg_1561);

assign sh_prom_i_i_i_cast_cast_cast_cast_fu_801_p1 = $unsigned(sh_prom_i_i_i_cast_cast_cast_fu_798_p1);

assign sh_prom_i_i_i_cast_cast_cast_fu_798_p1 = $signed(ush_reg_1415);

assign shl_ln1_fu_1193_p3 = {{add_ln74_fu_1187_p2}, {2'd0}};

assign shl_ln_fu_995_p3 = {{add_ln61_fu_990_p2}, {2'd0}};

assign sub_ln1311_1_fu_1080_p2 = (8'd127 - p_Repl2_5_fu_1048_p4);

assign sub_ln1311_fu_767_p2 = (8'd127 - p_Repl2_4_fu_735_p4);

assign sub_ln39_fu_660_p2 = (row_index_reg_1342 - ap_phi_mux_previous_row_index_1_phi_fu_411_p4);

assign tmp_1_fu_829_p4 = {{r_V_1_fu_811_p2[55:24]}};

assign tmp_3_fu_1142_p4 = {{r_V_3_fu_1124_p2[55:24]}};

assign tmp_5_fu_817_p3 = r_V_fu_805_p2[32'd24];

assign tmp_6_fu_857_p4 = {{nnz[31:1]}};

assign tmp_9_fu_1130_p3 = r_V_2_fu_1118_p2[32'd24];

assign tmp_fu_604_p4 = {{add_fu_599_p2[31:1]}};

assign trunc_ln1_fu_579_p4 = {{row_indices[63:2]}};

assign trunc_ln2_fu_625_p4 = {{add_ln35_fu_620_p2[63:2]}};

assign trunc_ln3_fu_675_p4 = {{values[63:2]}};

assign trunc_ln47_1_fu_695_p4 = {{col_indices[63:2]}};

assign trunc_ln4_fu_885_p4 = {{add_ln53_1_fu_880_p2[63:2]}};

assign trunc_ln53_1_fu_900_p4 = {{add_ln53_2_fu_895_p2[63:2]}};

assign trunc_ln53_fu_872_p1 = nnz[30:0];

assign trunc_ln5_fu_1012_p4 = {{add_ln61_1_fu_1007_p2[63:2]}};

assign trunc_ln6_fu_1210_p4 = {{add_ln74_1_fu_1205_p2[63:2]}};

assign trunc_ln_fu_534_p4 = {{x[63:2]}};

assign ush_1_fu_1090_p3 = ((isNeg_1_fu_1072_p3[0:0] === 1'b1) ? sext_ln1311_1_fu_1086_p1 : add_ln340_1_fu_1066_p2);

assign ush_fu_777_p3 = ((isNeg_fu_759_p3[0:0] === 1'b1) ? sext_ln1311_fu_773_p1 : add_ln340_fu_753_p2);

assign val_V_1_fu_1152_p3 = ((isNeg_1_reg_1556[0:0] === 1'b1) ? zext_ln662_1_fu_1138_p1 : tmp_3_fu_1142_p4);

assign val_V_fu_839_p3 = ((isNeg_reg_1410[0:0] === 1'b1) ? zext_ln662_fu_825_p1 : tmp_1_fu_829_p4);

assign x_local_d0 = gmem_0_addr_read_reg_1297;

assign zext_ln15_1_fu_1107_p1 = mantissa_V_1_fu_1098_p4;

assign zext_ln15_fu_794_p1 = mantissa_V_fu_785_p4;

assign zext_ln340_1_fu_1062_p1 = p_Repl2_5_fu_1048_p4;

assign zext_ln340_fu_749_p1 = p_Repl2_4_fu_735_p4;

assign zext_ln39_fu_670_p1 = add_ln39_fu_665_p2;

assign zext_ln47_fu_715_p1 = gmem_1_addr_read_reg_1385;

assign zext_ln53_fu_940_p1 = trunc_ln53_reg_1455;

assign zext_ln57_fu_949_p1 = gmem_1_addr_1_read_reg_1492;

assign zext_ln61_fu_1003_p1 = shl_ln_fu_995_p3;

assign zext_ln63_fu_1032_p1 = j_1_reg_1508;

assign zext_ln662_1_fu_1138_p1 = tmp_9_fu_1130_p3;

assign zext_ln662_fu_825_p1 = tmp_5_fu_817_p3;

assign zext_ln74_fu_1201_p1 = shl_ln1_fu_1193_p3;

endmodule //spmv_kernel
